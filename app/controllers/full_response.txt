{
  status: 200,
  statusText: 'OK',
  headers: Object [AxiosHeaders] {
    'content-type': 'application/json; charset=UTF-8',
    vary: 'Origin, X-Origin, Referer',
    date: 'Sun, 08 Sep 2024 20:53:19 GMT',
    server: 'ESF',
    'cache-control': 'private',
    'x-xss-protection': '0',
    'x-frame-options': 'SAMEORIGIN',
    'x-content-type-options': 'nosniff',
    'alt-svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
    'transfer-encoding': 'chunked',
    [set]: [Getter/Setter],
    [get]: [Getter/Setter],
    [has]: [Getter/Setter],
    [delete]: [Getter/Setter],
    [clear]: [Getter/Setter],
    [normalize]: [Getter/Setter],
    [concat]: [Getter/Setter],
    [toJSON]: [Getter/Setter],
    [toString]: [Getter/Setter],
    [getContentType]: [Getter/Setter],
    [setContentType]: [Getter/Setter],
    [hasContentType]: [Getter/Setter],
    [getContentLength]: [Getter/Setter],
    [setContentLength]: [Getter/Setter],
    [hasContentLength]: [Getter/Setter],
    [getAccept]: [Getter/Setter],
    [setAccept]: [Getter/Setter],
    [hasAccept]: [Getter/Setter],
    [getAcceptEncoding]: [Getter/Setter],
    [setAcceptEncoding]: [Getter/Setter],
    [hasAcceptEncoding]: [Getter/Setter],
    [getUserAgent]: [Getter/Setter],
    [setUserAgent]: [Getter/Setter],
    [hasUserAgent]: [Getter/Setter],
    [getAuthorization]: [Getter/Setter],
    [setAuthorization]: [Getter/Setter],
    [hasAuthorization]: [Getter/Setter],
    [Symbol(Symbol.toStringTag)]: [Getter]
  },
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch', [length]: 3 ],
    transformRequest: [
      <ref *1> [Function: transformRequest] {
        [length]: 2,
        [name]: 'transformRequest',
        [prototype]: { [constructor]: [Circular *1] }
      },
      [length]: 1
    ],
    transformResponse: [
      <ref *2> [Function: transformResponse] {
        [length]: 1,
        [name]: 'transformResponse',
        [prototype]: { [constructor]: [Circular *2] }
      },
      [length]: 1
    ],
    timeout: 0,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: <ref *3> [Function: FormData] {
        [length]: 1,
        [name]: 'FormData',
        [arguments]: null,
        [caller]: null,
        [prototype]: CombinedStream {
          [constructor]: [Circular *3],
          append: <ref *4> [Function (anonymous)] {
            [length]: 3,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *4] }
          },
          _trackLength: <ref *5> [Function (anonymous)] {
            [length]: 3,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *5] }
          },
          _lengthRetriever: <ref *6> [Function (anonymous)] {
            [length]: 2,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *6] }
          },
          _multiPartHeader: <ref *7> [Function (anonymous)] {
            [length]: 3,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *7] }
          },
          _getContentDisposition: <ref *8> [Function (anonymous)] {
            [length]: 2,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *8] }
          },
          _getContentType: <ref *9> [Function (anonymous)] {
            [length]: 2,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *9] }
          },
          _multiPartFooter: <ref *10> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *10] }
          },
          _lastBoundary: <ref *11> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *11] }
          },
          getHeaders: <ref *12> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *12] }
          },
          setBoundary: <ref *13> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *13] }
          },
          getBoundary: <ref *14> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *14] }
          },
          getBuffer: <ref *15> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *15] }
          },
          _generateBoundary: <ref *16> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *16] }
          },
          getLengthSync: <ref *17> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *17] }
          },
          hasKnownLength: <ref *18> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *18] }
          },
          getLength: <ref *19> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *19] }
          },
          submit: <ref *20> [Function (anonymous)] {
            [length]: 2,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *20] }
          },
          _error: <ref *21> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *21] }
          },
          toString: <ref *22> [Function (anonymous)] {
            [length]: 0,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *22] }
          },
          _events: undefined,
          _eventsCount: 0,
          _maxListeners: undefined,
          [Symbol(kCapture)]: false
        },
        [super_]: <ref *23> [Function: CombinedStream] {
          [length]: 0,
          [name]: 'CombinedStream',
          [arguments]: null,
          [caller]: null,
          [prototype]: Stream {
            [constructor]: [Circular *23],
            append: <ref *24> [Function (anonymous)] {
              [length]: 1,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *24] }
            },
            pipe: <ref *25> [Function (anonymous)] {
              [length]: 2,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *25] }
            },
            _getNext: <ref *26> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *26] }
            },
            _realGetNext: <ref *27> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *27] }
            },
            _pipeNext: <ref *28> [Function (anonymous)] {
              [length]: 1,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *28] }
            },
            _handleErrors: <ref *29> [Function (anonymous)] {
              [length]: 1,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *29] }
            },
            write: <ref *30> [Function (anonymous)] {
              [length]: 1,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *30] }
            },
            pause: <ref *31> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *31] }
            },
            resume: <ref *32> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *32] }
            },
            end: <ref *33> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *33] }
            },
            destroy: <ref *34> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *34] }
            },
            _reset: <ref *35> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *35] }
            },
            _checkDataSize: <ref *36> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *36] }
            },
            _updateDataSize: <ref *37> [Function (anonymous)] {
              [length]: 0,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *37] }
            },
            _emitError: <ref *38> [Function (anonymous)] {
              [length]: 1,
              [name]: '',
              [arguments]: null,
              [caller]: null,
              [prototype]: { [constructor]: [Circular *38] }
            },
            _events: undefined,
            _eventsCount: 0,
            _maxListeners: undefined,
            [Symbol(kCapture)]: false
          },
          [super_]: <ref *39> [Function: Stream] {
            [length]: 1,
            [name]: 'Stream',
            [prototype]: EventEmitter {
              [constructor]: [Circular *39],
              pipe: <ref *40> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *40] }
              },
              eventNames: <ref *41> [Function: eventNames] {
                [length]: 0,
                [name]: 'eventNames',
                [prototype]: { [constructor]: [Circular *41] }
              },
              _events: undefined,
              _eventsCount: 0,
              _maxListeners: undefined,
              [Symbol(kCapture)]: false
            },
            isDestroyed: <ref *42> [Function: isDestroyed] {
              [length]: 1,
              [name]: 'isDestroyed',
              [prototype]: { [constructor]: [Circular *42] }
            },
            isDisturbed: <ref *43> [Function: isDisturbed] {
              [length]: 1,
              [name]: 'isDisturbed',
              [prototype]: { [constructor]: [Circular *43] }
            },
            isErrored: <ref *44> [Function: isErrored] {
              [length]: 1,
              [name]: 'isErrored',
              [prototype]: { [constructor]: [Circular *44] }
            },
            isReadable: <ref *45> [Function: isReadable] {
              [length]: 1,
              [name]: 'isReadable',
              [prototype]: { [constructor]: [Circular *45] }
            },
            isWritable: <ref *46> [Function: isWritable] {
              [length]: 1,
              [name]: 'isWritable',
              [prototype]: { [constructor]: [Circular *46] }
            },
            Readable: <ref *47> [Function: Readable] {
              [length]: 1,
              [name]: 'Readable',
              [prototype]: Stream {
                [constructor]: [Circular *47],
                destroy: <ref *48> [Function: destroy] {
                  [length]: 2,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *48] }
                },
                _undestroy: <ref *49> [Function: undestroy] {
                  [length]: 0,
                  [name]: 'undestroy',
                  [prototype]: { [constructor]: [Circular *49] }
                },
                _destroy: <ref *50> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *50] }
                },
                push: <ref *51> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *51] }
                },
                unshift: <ref *52> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *52] }
                },
                isPaused: <ref *53> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *53] }
                },
                setEncoding: <ref *54> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *54] }
                },
                read: <ref *55> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *55] }
                },
                _read: <ref *56> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *56] }
                },
                pipe: <ref *57> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *57] }
                },
                unpipe: <ref *58> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *58] }
                },
                on: <ref *59> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *59] }
                },
                addListener: <ref *59> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *59] }
                },
                removeListener: <ref *60> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *60] }
                },
                off: <ref *60> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *60] }
                },
                removeAllListeners: <ref *61> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *61] }
                },
                resume: <ref *62> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *62] }
                },
                pause: <ref *63> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *63] }
                },
                wrap: <ref *64> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *64] }
                },
                iterator: <ref *65> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *65] }
                },
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [destroyed]: [Getter/Setter],
                [readableEnded]: [Getter],
                [asIndexedPairs]: <ref *66> [Function: deprecated] {
                  [length]: 0,
                  [name]: 'deprecated',
                  [prototype]: { [constructor]: [Circular *66] }
                },
                [drop]: <ref *67> [Function: drop] {
                  [length]: 1,
                  [name]: 'drop',
                  [prototype]: { [constructor]: [Circular *67] }
                },
                [filter]: <ref *68> [Function: filter] {
                  [length]: 2,
                  [name]: 'filter',
                  [prototype]: { [constructor]: [Circular *68] }
                },
                [flatMap]: <ref *69> [Function: flatMap] {
                  [length]: 2,
                  [name]: 'flatMap',
                  [prototype]: { [constructor]: [Circular *69] }
                },
                [map]: <ref *70> [Function: map] {
                  [length]: 2,
                  [name]: 'map',
                  [prototype]: { [constructor]: [Circular *70] }
                },
                [take]: <ref *71> [Function: take] {
                  [length]: 1,
                  [name]: 'take',
                  [prototype]: { [constructor]: [Circular *71] }
                },
                [compose]: <ref *72> [Function: compose] {
                  [length]: 2,
                  [name]: 'compose',
                  [prototype]: { [constructor]: [Circular *72] }
                },
                [every]: <ref *73> [Function: every] {
                  [length]: 1,
                  [name]: 'every',
                  [prototype]: { [constructor]: [Circular *73] }
                },
                [forEach]: <ref *74> [Function: forEach] {
                  [length]: 2,
                  [name]: 'forEach',
                  [prototype]: { [constructor]: [Circular *74] }
                },
                [reduce]: <ref *75> [Function: reduce] {
                  [length]: 3,
                  [name]: 'reduce',
                  [prototype]: { [constructor]: [Circular *75] }
                },
                [toArray]: <ref *76> [Function: toArray] {
                  [length]: 1,
                  [name]: 'toArray',
                  [prototype]: { [constructor]: [Circular *76] }
                },
                [some]: <ref *77> [Function: some] {
                  [length]: 1,
                  [name]: 'some',
                  [prototype]: { [constructor]: [Circular *77] }
                },
                [find]: <ref *78> [Function: find] {
                  [length]: 2,
                  [name]: 'find',
                  [prototype]: { [constructor]: [Circular *78] }
                },
                [Symbol(nodejs.rejection)]: <ref *79> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *79] }
                },
                [Symbol(nodejs.asyncDispose)]: <ref *80> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *80] }
                },
                [Symbol(Symbol.asyncIterator)]: <ref *81> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *81] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              ReadableState: <ref *82> [Function: ReadableState] {
                [length]: 3,
                [name]: 'ReadableState',
                [prototype]: {
                  [constructor]: [Circular *82],
                  [objectMode]: [Getter/Setter],
                  [ended]: [Getter/Setter],
                  [endEmitted]: [Getter/Setter],
                  [reading]: [Getter/Setter],
                  [constructed]: [Getter/Setter],
                  [sync]: [Getter/Setter],
                  [needReadable]: [Getter/Setter],
                  [emittedReadable]: [Getter/Setter],
                  [readableListening]: [Getter/Setter],
                  [resumeScheduled]: [Getter/Setter],
                  [errorEmitted]: [Getter/Setter],
                  [emitClose]: [Getter/Setter],
                  [autoDestroy]: [Getter/Setter],
                  [destroyed]: [Getter/Setter],
                  [closed]: [Getter/Setter],
                  [closeEmitted]: [Getter/Setter],
                  [multiAwaitDrain]: [Getter/Setter],
                  [readingMore]: [Getter/Setter],
                  [dataEmitted]: [Getter/Setter],
                  [errored]: [Getter/Setter],
                  [defaultEncoding]: [Getter/Setter],
                  [decoder]: [Getter/Setter],
                  [encoding]: [Getter/Setter],
                  [flowing]: [Getter/Setter],
                  [pipesCount]: [Getter],
                  [paused]: [Getter/Setter],
                  [Symbol(kOnConstructed)]: <ref *83> [Function: onConstructed] {
                    [length]: 1,
                    [name]: 'onConstructed',
                    [prototype]: { [constructor]: [Circular *83] }
                  }
                }
              },
              _fromList: <ref *84> [Function: fromList] {
                [length]: 2,
                [name]: 'fromList',
                [prototype]: { [constructor]: [Circular *84] }
              },
              from: <ref *85> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *85] }
              },
              fromWeb: <ref *86> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *86] }
              },
              toWeb: <ref *87> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *87] }
              },
              wrap: <ref *88> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *88] }
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            Writable: <ref *89> [Function: Writable] {
              [length]: 1,
              [name]: 'Writable',
              [prototype]: Stream {
                [constructor]: [Circular *89],
                pipe: <ref *90> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *90] }
                },
                write: <ref *91> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *91] }
                },
                cork: <ref *92> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *92] }
                },
                uncork: <ref *93> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *93] }
                },
                setDefaultEncoding: <ref *94> [Function: setDefaultEncoding] {
                  [length]: 1,
                  [name]: 'setDefaultEncoding',
                  [prototype]: { [constructor]: [Circular *94] }
                },
                _write: <ref *95> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *95] }
                },
                _writev: null,
                end: <ref *96> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *96] }
                },
                [closed]: [Getter],
                [destroyed]: [Getter/Setter],
                [writable]: [Getter/Setter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableBuffer]: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [writableLength]: [Getter],
                [errored]: [Getter],
                [writableAborted]: [Getter],
                destroy: <ref *97> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *97] }
                },
                _undestroy: <ref *49> [Function: undestroy] {
                  [length]: 0,
                  [name]: 'undestroy',
                  [prototype]: { [constructor]: [Circular *49] }
                },
                _destroy: <ref *98> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *98] }
                },
                [Symbol(nodejs.rejection)]: <ref *99> [Function (anonymous)] {
                  [length]: 1,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *99] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              WritableState: <ref *100> [Function: WritableState] {
                [length]: 3,
                [name]: 'WritableState',
                [prototype]: {
                  [constructor]: [Circular *100],
                  [objectMode]: [Getter/Setter],
                  [finalCalled]: [Getter/Setter],
                  [needDrain]: [Getter/Setter],
                  [ending]: [Getter/Setter],
                  [ended]: [Getter/Setter],
                  [finished]: [Getter/Setter],
                  [destroyed]: [Getter/Setter],
                  [decodeStrings]: [Getter/Setter],
                  [writing]: [Getter/Setter],
                  [sync]: [Getter/Setter],
                  [bufferProcessing]: [Getter/Setter],
                  [constructed]: [Getter/Setter],
                  [prefinished]: [Getter/Setter],
                  [errorEmitted]: [Getter/Setter],
                  [emitClose]: [Getter/Setter],
                  [autoDestroy]: [Getter/Setter],
                  [closed]: [Getter/Setter],
                  [closeEmitted]: [Getter/Setter],
                  [allBuffers]: [Getter/Setter],
                  [allNoop]: [Getter/Setter],
                  [errored]: [Getter/Setter],
                  [writable]: [Getter/Setter],
                  [defaultEncoding]: [Getter/Setter],
                  [writecb]: [Getter/Setter],
                  [afterWriteTickInfo]: [Getter/Setter],
                  [buffered]: [Getter/Setter],
                  getBuffer: <ref *101> [Function: getBuffer] {
                    [length]: 0,
                    [name]: 'getBuffer',
                    [prototype]: { [constructor]: [Circular *101] }
                  },
                  [bufferedRequestCount]: [Getter],
                  [Symbol(kOnConstructed)]: <ref *102> [Function: onConstructed] {
                    [length]: 1,
                    [name]: 'onConstructed',
                    [prototype]: { [constructor]: [Circular *102] }
                  }
                }
              },
              fromWeb: <ref *103> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *103] }
              },
              toWeb: <ref *104> [Function (anonymous)] {
                [length]: 1,
                [name]: '',
                [prototype]: { [constructor]: [Circular *104] }
              },
              [Symbol(Symbol.hasInstance)]: <ref *105> [Function: value] {
                [length]: 1,
                [name]: 'value',
                [prototype]: { [constructor]: [Circular *105] }
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            Duplex: <ref *106> [Function: Duplex] {
              [length]: 1,
              [name]: 'Duplex',
              [prototype]: Readable {
                [constructor]: [Circular *106],
                write: <ref *91> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *91] }
                },
                cork: <ref *92> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *92] }
                },
                uncork: <ref *93> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *93] }
                },
                setDefaultEncoding: <ref *94> [Function: setDefaultEncoding] {
                  [length]: 1,
                  [name]: 'setDefaultEncoding',
                  [prototype]: { [constructor]: [Circular *94] }
                },
                _write: <ref *95> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *95] }
                },
                _writev: null,
                end: <ref *96> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *96] }
                },
                [writable]: [Getter/Setter],
                [writableHighWaterMark]: [Getter],
                [writableObjectMode]: [Getter],
                [writableBuffer]: [Getter],
                [writableLength]: [Getter],
                [writableFinished]: [Getter],
                [writableCorked]: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                [destroyed]: [Getter/Setter],
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [readableEnded]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              fromWeb: <ref *107> [Function (anonymous)] {
                [length]: 2,
                [name]: '',
                [prototype]: { [constructor]: [Circular *107] }
              },
              toWeb: <ref *108> [Function (anonymous)] {
                [length]: 1,
                [name]: '',
                [prototype]: { [constructor]: [Circular *108] }
              },
              from: <ref *109> [Function (anonymous)] {
                [length]: 1,
                [name]: '',
                [prototype]: { [constructor]: [Circular *109] }
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            Transform: <ref *110> [Function: Transform] {
              [length]: 1,
              [name]: 'Transform',
              [prototype]: Duplex {
                [constructor]: [Circular *110],
                _final: <ref *111> [Function: final] {
                  [length]: 1,
                  [name]: 'final',
                  [prototype]: { [constructor]: [Circular *111] }
                },
                _transform: <ref *112> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *112] }
                },
                _write: <ref *113> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *113] }
                },
                _read: <ref *114> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *114] }
                },
                _writev: null,
                [writable]: [Getter/Setter],
                [writableHighWaterMark]: [Getter],
                [writableObjectMode]: [Getter],
                [writableBuffer]: [Getter],
                [writableLength]: [Getter],
                [writableFinished]: [Getter],
                [writableCorked]: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                [destroyed]: [Getter/Setter],
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [readableEnded]: [Getter]
              },
              promises: [Getter]
            },
            PassThrough: <ref *115> [Function: PassThrough] {
              [length]: 1,
              [name]: 'PassThrough',
              [prototype]: Transform {
                [constructor]: [Circular *115],
                _transform: <ref *116> [Function (anonymous)] {
                  [length]: 3,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *116] }
                },
                _writev: null,
                [writable]: [Getter/Setter],
                [writableHighWaterMark]: [Getter],
                [writableObjectMode]: [Getter],
                [writableBuffer]: [Getter],
                [writableLength]: [Getter],
                [writableFinished]: [Getter],
                [writableCorked]: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                [destroyed]: [Getter/Setter],
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [readableEnded]: [Getter]
              }
            },
            pipeline: <ref *117> [Function: pipeline] {
              [length]: 0,
              [name]: 'pipeline',
              [prototype]: { [constructor]: [Circular *117] },
              [Symbol(nodejs.util.promisify.custom)]: [Getter]
            },
            addAbortSignal: <ref *118> [Function: addAbortSignal] {
              [length]: 2,
              [name]: 'addAbortSignal',
              [prototype]: { [constructor]: [Circular *118] }
            },
            finished: <ref *119> [Function: eos] {
              [length]: 3,
              [name]: 'eos',
              [prototype]: { [constructor]: [Circular *119] },
              finished: <ref *120> [Function: finished] {
                [length]: 2,
                [name]: 'finished',
                [prototype]: { [constructor]: [Circular *120] }
              },
              [Symbol(nodejs.util.promisify.custom)]: [Getter]
            },
            destroy: <ref *121> [Function: destroyer] {
              [length]: 2,
              [name]: 'destroyer',
              [prototype]: { [constructor]: [Circular *121] }
            },
            compose: <ref *122> [Function: compose] {
              [length]: 0,
              [name]: 'compose',
              [prototype]: { [constructor]: [Circular *122] }
            },
            setDefaultHighWaterMark: <ref *123> [Function: setDefaultHighWaterMark] {
              [length]: 2,
              [name]: 'setDefaultHighWaterMark',
              [prototype]: { [constructor]: [Circular *123] }
            },
            getDefaultHighWaterMark: <ref *124> [Function: getDefaultHighWaterMark] {
              [length]: 1,
              [name]: 'getDefaultHighWaterMark',
              [prototype]: { [constructor]: [Circular *124] }
            },
            promises: [Getter],
            Stream: [Circular *39],
            _isUint8Array: <ref *125> [Function: isUint8Array] {
              [length]: 1,
              [name]: 'isUint8Array',
              [prototype]: { [constructor]: [Circular *125] }
            },
            _uint8ArrayToBuffer: <ref *126> [Function: _uint8ArrayToBuffer] {
              [length]: 1,
              [name]: '_uint8ArrayToBuffer',
              [prototype]: { [constructor]: [Circular *126] }
            },
            usingDomains: false,
            captureRejectionSymbol: Symbol(nodejs.rejection),
            captureRejections: [Getter/Setter],
            EventEmitterAsyncResource: [Getter],
            errorMonitor: Symbol(events.errorMonitor),
            defaultMaxListeners: [Getter/Setter],
            [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
            [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
          },
          create: <ref *127> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *127] }
          },
          isStreamLike: <ref *128> [Function (anonymous)] {
            [length]: 1,
            [name]: '',
            [arguments]: null,
            [caller]: null,
            [prototype]: { [constructor]: [Circular *128] }
          }
        },
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: <ref *129> [class Blob] {
        [length]: 0,
        [name]: 'Blob',
        [prototype]: {
          [constructor]: [Circular *129],
          type: [Getter],
          size: [Getter],
          slice: [Function: slice] { [length]: 0, [name]: 'slice' },
          arrayBuffer: [Function: arrayBuffer] { [length]: 0, [name]: 'arrayBuffer' },
          text: [AsyncFunction: text] {
            [length]: 0,
            [name]: 'text',
            [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
          },
          stream: [Function: stream] { [length]: 0, [name]: 'stream' },
          [Symbol(nodejs.util.inspect.custom)]: [Function: [nodejs.util.inspect.custom]] {
            [length]: 2,
            [name]: '[nodejs.util.inspect.custom]'
          },
          [Symbol(messaging_clone_symbol)]: [Function: [messaging_clone_symbol]] {
            [length]: 0,
            [name]: '[messaging_clone_symbol]'
          },
          [Symbol(messaging_deserialize_symbol)]: [Function: [messaging_deserialize_symbol]] {
            [length]: 1,
            [name]: '[messaging_deserialize_symbol]'
          },
          [Symbol(Symbol.toStringTag)]: 'Blob'
        }
      }
    },
    validateStatus: <ref *130> [Function: validateStatus] {
      [length]: 1,
      [name]: 'validateStatus',
      [prototype]: { [constructor]: [Circular *130] }
    },
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.7.7',
      'Content-Length': '107708',
      'Accept-Encoding': 'gzip, compress, deflate, br',
      [set]: [Getter/Setter],
      [get]: [Getter/Setter],
      [has]: [Getter/Setter],
      [delete]: [Getter/Setter],
      [clear]: [Getter/Setter],
      [normalize]: [Getter/Setter],
      [concat]: [Getter/Setter],
      [toJSON]: [Getter/Setter],
      [toString]: [Getter/Setter],
      [getContentType]: [Getter/Setter],
      [setContentType]: [Getter/Setter],
      [hasContentType]: [Getter/Setter],
      [getContentLength]: [Getter/Setter],
      [setContentLength]: [Getter/Setter],
      [hasContentLength]: [Getter/Setter],
      [getAccept]: [Getter/Setter],
      [setAccept]: [Getter/Setter],
      [hasAccept]: [Getter/Setter],
      [getAcceptEncoding]: [Getter/Setter],
      [setAcceptEncoding]: [Getter/Setter],
      [hasAcceptEncoding]: [Getter/Setter],
      [getUserAgent]: [Getter/Setter],
      [setUserAgent]: [Getter/Setter],
      [hasUserAgent]: [Getter/Setter],
      [getAuthorization]: [Getter/Setter],
      [setAuthorization]: [Getter/Setter],
      [hasAuthorization]: [Getter/Setter],
      [Symbol(Symbol.toStringTag)]: [Getter]
    },
    method: 'post',
    url: 'https://speech.googleapis.com/v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
    data: '{"audio":{"content":"'... 97708 more characters
  },
  request: <ref *248> ClientRequest {
    _events: [Object: null prototype] {
      abort: <ref *131> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *131] }
      },
      aborted: <ref *132> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *132] }
      },
      connect: <ref *133> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *133] }
      },
      error: <ref *134> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *134] }
      },
      socket: <ref *135> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *135] }
      },
      timeout: <ref *136> [Function (anonymous)] {
        [length]: 3,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *136] }
      },
      finish: <ref *137> [Function: requestOnFinish] {
        [length]: 0,
        [name]: 'requestOnFinish',
        [prototype]: { [constructor]: [Circular *137] }
      }
    },
    _eventsCount: 7,
    _maxListeners: undefined,
    outputData: [ [length]: 0 ],
    outputSize: 0,
    writable: true,
    destroyed: true,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: true,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: '107708',
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    _closed: true,
    socket: <ref *147> TLSSocket {
      _tlsOptions: {
        allowHalfOpen: undefined,
        pipe: false,
        secureContext: SecureContext {
          context: SecureContext { _external: [Getter] }
        },
        isServer: false,
        requestCert: true,
        rejectUnauthorized: true,
        session: undefined,
        ALPNProtocols: undefined,
        requestOCSP: undefined,
        enableTrace: undefined,
        pskCallback: undefined,
        highWaterMark: undefined,
        onread: undefined,
        signal: undefined
      },
      _secureEstablished: true,
      _securePending: false,
      _newSessionPending: false,
      _controlReleased: true,
      secureConnecting: false,
      _SNICallback: null,
      servername: 'speech.googleapis.com',
      alpnProtocol: false,
      authorized: true,
      authorizationError: null,
      encrypted: true,
      _events: [Object: null prototype] {
        close: [
          <ref *138> [Function: onSocketCloseDestroySSL] {
            [length]: 0,
            [name]: 'onSocketCloseDestroySSL',
            [prototype]: { [constructor]: [Circular *138] }
          },
          [Function: bound onceWrapper] {
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: [Function (anonymous)] { [length]: 1, [name]: '' }
          },
          <ref *139> [Function: onClose] {
            [length]: 1,
            [name]: 'onClose',
            [prototype]: { [constructor]: [Circular *139] }
          },
          [length]: 3
        ],
        end: <ref *140> [Function: onReadableStreamEnd] {
          [length]: 0,
          [name]: 'onReadableStreamEnd',
          [prototype]: { [constructor]: [Circular *140] }
        },
        error: [Function: bound onceWrapper] {
          [length]: 0,
          [name]: 'bound onceWrapper',
          listener: <ref *141> [Function: freeSocketErrorListener] {
            [length]: 1,
            [name]: 'freeSocketErrorListener',
            [prototype]: { [constructor]: [Circular *141] }
          }
        },
        newListener: <ref *142> [Function: keylogNewListener] {
          [length]: 1,
          [name]: 'keylogNewListener',
          [prototype]: { [constructor]: [Circular *142] }
        },
        connect: undefined,
        secure: <ref *143> [Function: onConnectSecure] {
          [length]: 0,
          [name]: 'onConnectSecure',
          [prototype]: { [constructor]: [Circular *143] }
        },
        session: [Function (anonymous)] { [length]: 1, [name]: '' },
        free: <ref *144> [Function: onFree] {
          [length]: 0,
          [name]: 'onFree',
          [prototype]: { [constructor]: [Circular *144] }
        },
        timeout: <ref *145> [Function: onTimeout] {
          [length]: 0,
          [name]: 'onTimeout',
          [prototype]: { [constructor]: [Circular *145] }
        },
        agentRemove: <ref *146> [Function: onRemove] {
          [length]: 0,
          [name]: 'onRemove',
          [prototype]: { [constructor]: [Circular *146] }
        },
        data: undefined,
        drain: undefined
      },
      _eventsCount: 9,
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: 'speech.googleapis.com',
      _closeAfterHandlingError: false,
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: [ [length]: 0 ],
        bufferIndex: 0,
        length: 0,
        pipes: [ [length]: 0 ],
        awaitDrainWriters: null,
        [Symbol(kState)]: 60303620,
        [objectMode]: [Getter/Setter],
        [ended]: [Getter/Setter],
        [endEmitted]: [Getter/Setter],
        [reading]: [Getter/Setter],
        [constructed]: [Getter/Setter],
        [sync]: [Getter/Setter],
        [needReadable]: [Getter/Setter],
        [emittedReadable]: [Getter/Setter],
        [readableListening]: [Getter/Setter],
        [resumeScheduled]: [Getter/Setter],
        [errorEmitted]: [Getter/Setter],
        [emitClose]: [Getter/Setter],
        [autoDestroy]: [Getter/Setter],
        [destroyed]: [Getter/Setter],
        [closed]: [Getter/Setter],
        [closeEmitted]: [Getter/Setter],
        [multiAwaitDrain]: [Getter/Setter],
        [readingMore]: [Getter/Setter],
        [dataEmitted]: [Getter/Setter],
        [errored]: [Getter/Setter],
        [defaultEncoding]: [Getter/Setter],
        [decoder]: [Getter/Setter],
        [encoding]: [Getter/Setter],
        [flowing]: [Getter/Setter],
        [pipesCount]: [Getter],
        [paused]: [Getter/Setter]
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite] {
          [length]: 1,
          [name]: 'bound onwrite'
        },
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17563908,
        [Symbol(kBufferedValue)]: null,
        [Symbol(kWriteCbValue)]: [Function (anonymous)] { [length]: 1, [name]: '' },
        [objectMode]: [Getter/Setter],
        [finalCalled]: [Getter/Setter],
        [needDrain]: [Getter/Setter],
        [ending]: [Getter/Setter],
        [ended]: [Getter/Setter],
        [finished]: [Getter/Setter],
        [destroyed]: [Getter/Setter],
        [decodeStrings]: [Getter/Setter],
        [writing]: [Getter/Setter],
        [sync]: [Getter/Setter],
        [bufferProcessing]: [Getter/Setter],
        [constructed]: [Getter/Setter],
        [prefinished]: [Getter/Setter],
        [errorEmitted]: [Getter/Setter],
        [emitClose]: [Getter/Setter],
        [autoDestroy]: [Getter/Setter],
        [closed]: [Getter/Setter],
        [closeEmitted]: [Getter/Setter],
        [allBuffers]: [Getter/Setter],
        [allNoop]: [Getter/Setter],
        [errored]: [Getter/Setter],
        [writable]: [Getter/Setter],
        [defaultEncoding]: [Getter/Setter],
        [writecb]: [Getter/Setter],
        [afterWriteTickInfo]: [Getter/Setter],
        [buffered]: [Getter/Setter],
        [bufferedRequestCount]: [Getter]
      },
      allowHalfOpen: false,
      _maxListeners: undefined,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: undefined,
      _server: null,
      ssl: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *147],
          [owner]: [Getter/Setter],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        _parentWrap: null,
        _secureContext: SecureContext {
          context: SecureContext { _external: [Getter] }
        },
        reading: true,
        onkeylog: <ref *148> [Function: onkeylog] {
          [length]: 1,
          [name]: 'onkeylog',
          [prototype]: { [constructor]: [Circular *148] }
        },
        onhandshakestart: <ref *149> {
          [length]: 0,
          [name]: '',
          [arguments]: [Getter/Setter],
          [caller]: [Getter/Setter],
          [constructor]: [Function: Function] {
            [length]: 1,
            [name]: 'Function',
            [prototype]: [Circular *149]
          },
          [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
          [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
          [call]: [Function: call] { [length]: 1, [name]: 'call' },
          [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
          [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
            [length]: 1,
            [name]: '[Symbol.hasInstance]'
          }
        },
        onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
        onocspresponse: <ref *150> [Function: onocspresponse] {
          [length]: 1,
          [name]: 'onocspresponse',
          [prototype]: { [constructor]: [Circular *150] }
        },
        onnewsession: <ref *151> [Function: onnewsessionclient] {
          [length]: 2,
          [name]: 'onnewsessionclient',
          [prototype]: { [constructor]: [Circular *151] }
        },
        onerror: <ref *152> [Function: onerror] {
          [length]: 1,
          [name]: 'onerror',
          [prototype]: { [constructor]: [Circular *152] }
        },
        [Symbol(owner_symbol)]: [Circular *147],
        writeQueueSize: [Getter],
        [fd]: [Getter],
        [_externalStream]: [Getter],
        [bytesRead]: [Getter],
        [bytesWritten]: [Getter],
        isStreamBase: true
      },
      _requestCert: true,
      _rejectUnauthorized: true,
      timeout: 5000,
      parser: null,
      _httpMessage: null,
      autoSelectFamilyAttemptedAddresses: [ '142.250.194.138:443', [length]: 1 ],
      [Symbol(alpncallback)]: null,
      [Symbol(res)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *147],
          [owner]: [Getter/Setter],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        _parentWrap: null,
        _secureContext: SecureContext {
          context: SecureContext { _external: [Getter] }
        },
        reading: true,
        onkeylog: <ref *148> [Function: onkeylog] {
          [length]: 1,
          [name]: 'onkeylog',
          [prototype]: { [constructor]: [Circular *148] }
        },
        onhandshakestart: <ref *149> {
          [length]: 0,
          [name]: '',
          [arguments]: [Getter/Setter],
          [caller]: [Getter/Setter],
          [constructor]: [Function: Function] {
            [length]: 1,
            [name]: 'Function',
            [prototype]: [Circular *149]
          },
          [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
          [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
          [call]: [Function: call] { [length]: 1, [name]: 'call' },
          [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
          [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
            [length]: 1,
            [name]: '[Symbol.hasInstance]'
          }
        },
        onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
        onocspresponse: <ref *150> [Function: onocspresponse] {
          [length]: 1,
          [name]: 'onocspresponse',
          [prototype]: { [constructor]: [Circular *150] }
        },
        onnewsession: <ref *151> [Function: onnewsessionclient] {
          [length]: 2,
          [name]: 'onnewsessionclient',
          [prototype]: { [constructor]: [Circular *151] }
        },
        onerror: <ref *152> [Function: onerror] {
          [length]: 1,
          [name]: 'onerror',
          [prototype]: { [constructor]: [Circular *152] }
        },
        [Symbol(owner_symbol)]: [Circular *147],
        writeQueueSize: [Getter],
        [fd]: [Getter],
        [_externalStream]: [Getter],
        [bytesRead]: [Getter],
        [bytesWritten]: [Getter],
        isStreamBase: true
      },
      [Symbol(verified)]: true,
      [Symbol(pendingSession)]: null,
      [Symbol(async_id_symbol)]: -1,
      [Symbol(kHandle)]: TLSWrap {
        _parent: TCP {
          reading: [Getter/Setter],
          onconnection: null,
          [Symbol(owner_symbol)]: [Circular *147],
          [owner]: [Getter/Setter],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        _parentWrap: null,
        _secureContext: SecureContext {
          context: SecureContext { _external: [Getter] }
        },
        reading: true,
        onkeylog: <ref *148> [Function: onkeylog] {
          [length]: 1,
          [name]: 'onkeylog',
          [prototype]: { [constructor]: [Circular *148] }
        },
        onhandshakestart: <ref *149> {
          [length]: 0,
          [name]: '',
          [arguments]: [Getter/Setter],
          [caller]: [Getter/Setter],
          [constructor]: [Function: Function] {
            [length]: 1,
            [name]: 'Function',
            [prototype]: [Circular *149]
          },
          [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
          [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
          [call]: [Function: call] { [length]: 1, [name]: 'call' },
          [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
          [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
            [length]: 1,
            [name]: '[Symbol.hasInstance]'
          }
        },
        onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
        onocspresponse: <ref *150> [Function: onocspresponse] {
          [length]: 1,
          [name]: 'onocspresponse',
          [prototype]: { [constructor]: [Circular *150] }
        },
        onnewsession: <ref *151> [Function: onnewsessionclient] {
          [length]: 2,
          [name]: 'onnewsessionclient',
          [prototype]: { [constructor]: [Circular *151] }
        },
        onerror: <ref *152> [Function: onerror] {
          [length]: 1,
          [name]: 'onerror',
          [prototype]: { [constructor]: [Circular *152] }
        },
        [Symbol(owner_symbol)]: [Circular *147],
        writeQueueSize: [Getter],
        [fd]: [Getter],
        [_externalStream]: [Getter],
        [bytesRead]: [Getter],
        [bytesWritten]: [Getter],
        isStreamBase: true
      },
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 5000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 4946,
        _onTimeout: [Function],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(kHasPrimitive)]: false,
        [Symbol(asyncId)]: 47,
        [Symbol(triggerId)]: 45
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kSetNoDelay)]: false,
      [Symbol(kSetKeepAlive)]: true,
      [Symbol(kSetKeepAliveInitialDelay)]: 1,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0,
      [Symbol(connect-options)]: {
        rejectUnauthorized: true,
        ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
        checkServerIdentity: <ref *153> [Function: checkServerIdentity] {
          [length]: 2,
          [name]: 'checkServerIdentity',
          [prototype]: { [constructor]: [Circular *153] }
        },
        minDHSize: 1024,
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: null,
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.7',
          'Content-Length': '107708',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: <ref *154> [Function: dispatchBeforeRedirect] {
          [length]: 2,
          [name]: 'dispatchBeforeRedirect',
          [prototype]: { [constructor]: [Circular *154] }
        },
        beforeRedirects: {
          proxy: <ref *155> [Function: beforeRedirect] {
            [length]: 1,
            [name]: 'beforeRedirect',
            [prototype]: { [constructor]: [Circular *155] }
          }
        },
        hostname: 'speech.googleapis.com',
        port: 443,
        agent: undefined,
        nativeProtocols: {
          'http:': {
            _connectionListener: <ref *156> [Function: connectionListener] {
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: { [constructor]: [Circular *156] }
            },
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE', [length]: 34
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: <ref *157> [Function: Agent] {
              [length]: 1,
              [name]: 'Agent',
              [prototype]: EventEmitter {
                [constructor]: [Circular *157],
                createConnection: <ref *158> [Function: connect] {
                  [length]: 0,
                  [name]: 'connect',
                  [prototype]: { [constructor]: [Circular *158] }
                },
                getName: <ref *159> [Function: getName] {
                  [length]: 0,
                  [name]: 'getName',
                  [prototype]: { [constructor]: [Circular *159] }
                },
                addRequest: <ref *160> [Function: addRequest] {
                  [length]: 4,
                  [name]: 'addRequest',
                  [prototype]: { [constructor]: [Circular *160] }
                },
                createSocket: <ref *161> [Function: createSocket] {
                  [length]: 3,
                  [name]: 'createSocket',
                  [prototype]: { [constructor]: [Circular *161] }
                },
                removeSocket: <ref *162> [Function: removeSocket] {
                  [length]: 2,
                  [name]: 'removeSocket',
                  [prototype]: { [constructor]: [Circular *162] }
                },
                keepSocketAlive: <ref *163> [Function: keepSocketAlive] {
                  [length]: 1,
                  [name]: 'keepSocketAlive',
                  [prototype]: { [constructor]: [Circular *163] }
                },
                reuseSocket: <ref *164> [Function: reuseSocket] {
                  [length]: 2,
                  [name]: 'reuseSocket',
                  [prototype]: { [constructor]: [Circular *164] }
                },
                destroy: <ref *165> [Function: destroy] {
                  [length]: 0,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *165] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              defaultMaxSockets: Infinity,
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            ClientRequest: <ref *166> [Function: ClientRequest] {
              [length]: 3,
              [name]: 'ClientRequest',
              [prototype]: OutgoingMessage {
                [constructor]: [Circular *166],
                _finish: <ref *167> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *167] }
                },
                _implicitHeader: <ref *168> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *168] }
                },
                abort: <ref *169> [Function: abort] {
                  [length]: 0,
                  [name]: 'abort',
                  [prototype]: { [constructor]: [Circular *169] }
                },
                destroy: <ref *170> [Function: destroy] {
                  [length]: 1,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *170] }
                },
                onSocket: <ref *171> [Function: onSocket] {
                  [length]: 2,
                  [name]: 'onSocket',
                  [prototype]: { [constructor]: [Circular *171] }
                },
                _deferToConnect: <ref *172> [Function: _deferToConnect] {
                  [length]: 2,
                  [name]: '_deferToConnect',
                  [prototype]: { [constructor]: [Circular *172] }
                },
                setTimeout: <ref *173> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *173] }
                },
                setNoDelay: <ref *174> [Function: setNoDelay] {
                  [length]: 1,
                  [name]: 'setNoDelay',
                  [prototype]: { [constructor]: [Circular *174] }
                },
                setSocketKeepAlive: <ref *175> [Function: setSocketKeepAlive] {
                  [length]: 2,
                  [name]: 'setSocketKeepAlive',
                  [prototype]: { [constructor]: [Circular *175] }
                },
                clearTimeout: <ref *176> [Function: clearTimeout] {
                  [length]: 1,
                  [name]: 'clearTimeout',
                  [prototype]: { [constructor]: [Circular *176] }
                },
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            IncomingMessage: <ref *177> [Function: IncomingMessage] {
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: Readable {
                [constructor]: [Circular *177],
                [connection]: [Getter/Setter],
                [headers]: [Getter/Setter],
                [headersDistinct]: [Getter/Setter],
                [trailers]: [Getter/Setter],
                [trailersDistinct]: [Getter/Setter],
                setTimeout: <ref *178> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *178] }
                },
                _read: <ref *179> [Function: _read] {
                  [length]: 1,
                  [name]: '_read',
                  [prototype]: { [constructor]: [Circular *179] }
                },
                _destroy: <ref *180> [Function: _destroy] {
                  [length]: 2,
                  [name]: '_destroy',
                  [prototype]: { [constructor]: [Circular *180] }
                },
                _addHeaderLines: <ref *181> [Function: _addHeaderLines] {
                  [length]: 2,
                  [name]: '_addHeaderLines',
                  [prototype]: { [constructor]: [Circular *181] }
                },
                _addHeaderLine: <ref *182> [Function: _addHeaderLine] {
                  [length]: 3,
                  [name]: '_addHeaderLine',
                  [prototype]: { [constructor]: [Circular *182] }
                },
                _addHeaderLineDistinct: <ref *183> [Function: _addHeaderLineDistinct] {
                  [length]: 3,
                  [name]: '_addHeaderLineDistinct',
                  [prototype]: { [constructor]: [Circular *183] }
                },
                _dump: <ref *184> [Function: _dump] {
                  [length]: 0,
                  [name]: '_dump',
                  [prototype]: { [constructor]: [Circular *184] }
                },
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [destroyed]: [Getter/Setter],
                [readableEnded]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            OutgoingMessage: <ref *185> [Function: OutgoingMessage] {
              [length]: 1,
              [name]: 'OutgoingMessage',
              [prototype]: Stream {
                [constructor]: [Circular *185],
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                _renderHeaders: <ref *186> [Function: _renderHeaders] {
                  [length]: 0,
                  [name]: '_renderHeaders',
                  [prototype]: { [constructor]: [Circular *186] }
                },
                cork: <ref *187> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *187] }
                },
                uncork: <ref *188> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *188] }
                },
                setTimeout: <ref *189> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *189] }
                },
                destroy: <ref *190> [Function: destroy] {
                  [length]: 1,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *190] }
                },
                _send: <ref *191> [Function: _send] {
                  [length]: 4,
                  [name]: '_send',
                  [prototype]: { [constructor]: [Circular *191] }
                },
                _writeRaw: <ref *192> [Function: _writeRaw] {
                  [length]: 4,
                  [name]: '_writeRaw',
                  [prototype]: { [constructor]: [Circular *192] }
                },
                _storeHeader: <ref *193> [Function: _storeHeader] {
                  [length]: 2,
                  [name]: '_storeHeader',
                  [prototype]: { [constructor]: [Circular *193] }
                },
                setHeader: <ref *194> [Function: setHeader] {
                  [length]: 2,
                  [name]: 'setHeader',
                  [prototype]: { [constructor]: [Circular *194] }
                },
                setHeaders: <ref *195> [Function: setHeaders] {
                  [length]: 1,
                  [name]: 'setHeaders',
                  [prototype]: { [constructor]: [Circular *195] }
                },
                appendHeader: <ref *196> [Function: appendHeader] {
                  [length]: 2,
                  [name]: 'appendHeader',
                  [prototype]: { [constructor]: [Circular *196] }
                },
                getHeader: <ref *197> [Function: getHeader] {
                  [length]: 1,
                  [name]: 'getHeader',
                  [prototype]: { [constructor]: [Circular *197] }
                },
                getHeaderNames: <ref *198> [Function: getHeaderNames] {
                  [length]: 0,
                  [name]: 'getHeaderNames',
                  [prototype]: { [constructor]: [Circular *198] }
                },
                getRawHeaderNames: <ref *199> [Function: getRawHeaderNames] {
                  [length]: 0,
                  [name]: 'getRawHeaderNames',
                  [prototype]: { [constructor]: [Circular *199] }
                },
                getHeaders: <ref *200> [Function: getHeaders] {
                  [length]: 0,
                  [name]: 'getHeaders',
                  [prototype]: { [constructor]: [Circular *200] }
                },
                hasHeader: <ref *201> [Function: hasHeader] {
                  [length]: 1,
                  [name]: 'hasHeader',
                  [prototype]: { [constructor]: [Circular *201] }
                },
                removeHeader: <ref *202> [Function: removeHeader] {
                  [length]: 1,
                  [name]: 'removeHeader',
                  [prototype]: { [constructor]: [Circular *202] }
                },
                _implicitHeader: <ref *203> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *203] }
                },
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                write: <ref *204> [Function: write] {
                  [length]: 3,
                  [name]: 'write',
                  [prototype]: { [constructor]: [Circular *204] }
                },
                addTrailers: <ref *205> [Function: addTrailers] {
                  [length]: 1,
                  [name]: 'addTrailers',
                  [prototype]: { [constructor]: [Circular *205] }
                },
                end: <ref *206> [Function: end] {
                  [length]: 3,
                  [name]: 'end',
                  [prototype]: { [constructor]: [Circular *206] }
                },
                _finish: <ref *207> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *207] }
                },
                _flush: <ref *208> [Function: _flush] {
                  [length]: 0,
                  [name]: '_flush',
                  [prototype]: { [constructor]: [Circular *208] }
                },
                _flushOutput: <ref *209> [Function: _flushOutput] {
                  [length]: 1,
                  [name]: '_flushOutput',
                  [prototype]: { [constructor]: [Circular *209] }
                },
                flushHeaders: <ref *210> [Function: flushHeaders] {
                  [length]: 0,
                  [name]: 'flushHeaders',
                  [prototype]: { [constructor]: [Circular *210] }
                },
                pipe: <ref *211> [Function: pipe] {
                  [length]: 0,
                  [name]: 'pipe',
                  [prototype]: { [constructor]: [Circular *211] }
                },
                [Symbol(nodejs.rejection)]: <ref *212> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *212] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            Server: <ref *213> [Function: Server] {
              [length]: 2,
              [name]: 'Server',
              [prototype]: Server {
                [constructor]: [Circular *213],
                close: <ref *214> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *214] }
                },
                closeAllConnections: <ref *215> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *215] }
                },
                closeIdleConnections: <ref *216> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *216] }
                },
                setTimeout: <ref *217> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *217] }
                },
                [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                },
                [Symbol(nodejs.rejection)]: <ref *218> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *218] }
                },
                listening: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            ServerResponse: <ref *219> [Function: ServerResponse] {
              [length]: 2,
              [name]: 'ServerResponse',
              [prototype]: OutgoingMessage {
                [constructor]: [Circular *219],
                _finish: <ref *220> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *220] }
                },
                statusCode: 200,
                statusMessage: undefined,
                assignSocket: <ref *221> [Function: assignSocket] {
                  [length]: 1,
                  [name]: 'assignSocket',
                  [prototype]: { [constructor]: [Circular *221] }
                },
                detachSocket: <ref *222> [Function: detachSocket] {
                  [length]: 1,
                  [name]: 'detachSocket',
                  [prototype]: { [constructor]: [Circular *222] }
                },
                writeContinue: <ref *223> [Function: writeContinue] {
                  [length]: 1,
                  [name]: 'writeContinue',
                  [prototype]: { [constructor]: [Circular *223] }
                },
                writeProcessing: <ref *224> [Function: writeProcessing] {
                  [length]: 1,
                  [name]: 'writeProcessing',
                  [prototype]: { [constructor]: [Circular *224] }
                },
                writeEarlyHints: <ref *225> [Function: writeEarlyHints] {
                  [length]: 2,
                  [name]: 'writeEarlyHints',
                  [prototype]: { [constructor]: [Circular *225] }
                },
                _implicitHeader: <ref *226> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *226] }
                },
                writeHead: <ref *227> [Function: writeHead] {
                  [length]: 3,
                  [name]: 'writeHead',
                  [prototype]: { [constructor]: [Circular *227] }
                },
                writeHeader: <ref *227> [Function: writeHead] {
                  [length]: 3,
                  [name]: 'writeHead',
                  [prototype]: { [constructor]: [Circular *227] }
                },
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            createServer: <ref *228> [Function: createServer] {
              [length]: 2,
              [name]: 'createServer',
              [prototype]: { [constructor]: [Circular *228] }
            },
            validateHeaderName: <ref *229> [Function: wrappedFn] {
              [length]: 0,
              [name]: 'wrappedFn',
              [prototype]: { [constructor]: [Circular *229] },
              withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
            },
            validateHeaderValue: <ref *230> [Function: wrappedFn] {
              [length]: 0,
              [name]: 'wrappedFn',
              [prototype]: { [constructor]: [Circular *230] },
              withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
            },
            get: <ref *231> [Function: get] {
              [length]: 3,
              [name]: 'get',
              [prototype]: { [constructor]: [Circular *231] }
            },
            request: <ref *232> [Function: request] {
              [length]: 3,
              [name]: 'request',
              [prototype]: { [constructor]: [Circular *232] }
            },
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers] {
              [length]: 1,
              [name]: 'setMaxIdleHTTPParsers'
            },
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: <ref *233> [Function: Agent] {
              [length]: 1,
              [name]: 'Agent',
              [prototype]: Agent {
                [constructor]: [Circular *233],
                createConnection: <ref *234> [Function: createConnection] {
                  [length]: 3,
                  [name]: 'createConnection',
                  [prototype]: { [constructor]: [Circular *234] }
                },
                getName: <ref *235> [Function: getName] {
                  [length]: 0,
                  [name]: 'getName',
                  [prototype]: { [constructor]: [Circular *235] }
                },
                _getSession: <ref *236> [Function: _getSession] {
                  [length]: 1,
                  [name]: '_getSession',
                  [prototype]: { [constructor]: [Circular *236] }
                },
                _cacheSession: <ref *237> [Function: _cacheSession] {
                  [length]: 2,
                  [name]: '_cacheSession',
                  [prototype]: { [constructor]: [Circular *237] }
                },
                _evictSession: <ref *238> [Function: _evictSession] {
                  [length]: 1,
                  [name]: '_evictSession',
                  [prototype]: { [constructor]: [Circular *238] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              defaultMaxSockets: Infinity,
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            globalAgent: Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)] { [length]: 2, [name]: '' },
                newListener: <ref *239> [Function: maybeEnableKeylog] {
                  [length]: 1,
                  [name]: 'maybeEnableKeylog',
                  [prototype]: { [constructor]: [Circular *239] }
                }
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'speech.googleapis.com:443:::::::::::::::::::::': [ [Circular *147], [length]: 1 ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
                },
                list: [
                  'speech.googleapis.com:443:::::::::::::::::::::',
                  [length]: 1
                ]
              },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: <ref *240> [Function: Server] {
              [length]: 2,
              [name]: 'Server',
              [prototype]: Server {
                [constructor]: [Circular *240],
                closeAllConnections: <ref *215> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *215] }
                },
                closeIdleConnections: <ref *216> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *216] }
                },
                setTimeout: <ref *217> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *217] }
                },
                close: <ref *241> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *241] }
                },
                [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                },
                listening: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            createServer: <ref *242> [Function: createServer] {
              [length]: 2,
              [name]: 'createServer',
              [prototype]: { [constructor]: [Circular *242] }
            },
            get: <ref *243> [Function: get] {
              [length]: 3,
              [name]: 'get',
              [prototype]: { [constructor]: [Circular *243] }
            },
            request: <ref *244> [Function: request] {
              [length]: 0,
              [name]: 'request',
              [prototype]: { [constructor]: [Circular *244] }
            }
          }
        },
        pathname: '/v1/speech:recognize',
        search: '?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
        _defaultAgent: Agent {
          _events: [Object: null prototype] {
            free: [Function (anonymous)] { [length]: 2, [name]: '' },
            newListener: <ref *239> [Function: maybeEnableKeylog] {
              [length]: 1,
              [name]: 'maybeEnableKeylog',
              [prototype]: { [constructor]: [Circular *239] }
            }
          },
          _eventsCount: 2,
          _maxListeners: undefined,
          defaultPort: 443,
          protocol: 'https:',
          options: [Object: null prototype] {
            keepAlive: true,
            scheduling: 'lifo',
            timeout: 5000,
            noDelay: true,
            path: null
          },
          requests: [Object: null prototype] {},
          sockets: [Object: null prototype] {},
          freeSockets: [Object: null prototype] {
            'speech.googleapis.com:443:::::::::::::::::::::': [ [Circular *147], [length]: 1 ]
          },
          keepAliveMsecs: 1000,
          keepAlive: true,
          maxSockets: Infinity,
          maxFreeSockets: 256,
          scheduling: 'lifo',
          maxTotalSockets: Infinity,
          totalSocketCount: 1,
          maxCachedSessions: 100,
          _sessionCache: {
            map: {
              'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
            },
            list: [
              'speech.googleapis.com:443:::::::::::::::::::::',
              [length]: 1
            ]
          },
          [Symbol(shapeMode)]: false,
          [Symbol(kCapture)]: false
        },
        host: 'speech.googleapis.com',
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        servername: 'speech.googleapis.com',
        _agentKey: 'speech.googleapis.com:443:::::::::::::::::::::',
        encoding: null,
        keepAliveInitialDelay: 1000
      },
      [_connecting]: [Getter],
      [pending]: [Getter],
      [readyState]: [Getter],
      [bufferSize]: [Getter],
      bytesRead: [Getter],
      remoteAddress: [Getter],
      remoteFamily: [Getter],
      remotePort: [Getter],
      localAddress: [Getter],
      localPort: [Getter],
      localFamily: [Getter],
      _bytesDispatched: [Getter],
      bytesWritten: [Getter],
      [_handle]: [Getter/Setter],
      [Symbol(kUpdateTimer)]: [Getter],
      [writable]: [Getter/Setter],
      [writableHighWaterMark]: [Getter],
      [writableObjectMode]: [Getter],
      [writableBuffer]: [Getter],
      [writableLength]: [Getter],
      [writableFinished]: [Getter],
      [writableCorked]: [Getter],
      [writableEnded]: [Getter],
      [writableNeedDrain]: [Getter],
      [destroyed]: [Getter/Setter]
    },
    _header: 'POST /v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json\r\n' +
      'User-Agent: axios/1.7.7\r\n' +
      'Content-Length: 107708\r\n' +
      'Accept-Encoding: gzip, compress, deflate, br\r\n' +
      'Host: speech.googleapis.com\r\n' +
      'Connection: keep-alive\r\n' +
      '\r\n',
    _keepAliveTimeout: 0,
    _onPendingData: [Function: nop] { [length]: 0, [name]: 'nop' },
    agent: <ref *245> Agent {
      _events: [Object: null prototype] {
        free: [Function (anonymous)] { [length]: 2, [name]: '' },
        newListener: <ref *239> [Function: maybeEnableKeylog] {
          [length]: 1,
          [name]: 'maybeEnableKeylog',
          [prototype]: { [constructor]: [Circular *239] }
        }
      },
      _eventsCount: 2,
      _maxListeners: undefined,
      defaultPort: 443,
      protocol: 'https:',
      options: [Object: null prototype] {
        keepAlive: true,
        scheduling: 'lifo',
        timeout: 5000,
        noDelay: true,
        path: null
      },
      requests: [Object: null prototype] {},
      sockets: [Object: null prototype] {},
      freeSockets: [Object: null prototype] {
        'speech.googleapis.com:443:::::::::::::::::::::': [
          <ref *147> TLSSocket {
            _tlsOptions: {
              allowHalfOpen: undefined,
              pipe: false,
              secureContext: SecureContext {
                context: SecureContext { _external: [Getter] }
              },
              isServer: false,
              requestCert: true,
              rejectUnauthorized: true,
              session: undefined,
              ALPNProtocols: undefined,
              requestOCSP: undefined,
              enableTrace: undefined,
              pskCallback: undefined,
              highWaterMark: undefined,
              onread: undefined,
              signal: undefined
            },
            _secureEstablished: true,
            _securePending: false,
            _newSessionPending: false,
            _controlReleased: true,
            secureConnecting: false,
            _SNICallback: null,
            servername: 'speech.googleapis.com',
            alpnProtocol: false,
            authorized: true,
            authorizationError: null,
            encrypted: true,
            _events: [Object: null prototype] {
              close: [
                <ref *138> [Function: onSocketCloseDestroySSL] {
                  [length]: 0,
                  [name]: 'onSocketCloseDestroySSL',
                  [prototype]: { [constructor]: [Circular *138] }
                },
                [Function: bound onceWrapper] {
                  [length]: 0,
                  [name]: 'bound onceWrapper',
                  listener: [Function (anonymous)] { [length]: 1, [name]: '' }
                },
                <ref *139> [Function: onClose] {
                  [length]: 1,
                  [name]: 'onClose',
                  [prototype]: { [constructor]: [Circular *139] }
                },
                [length]: 3
              ],
              end: <ref *140> [Function: onReadableStreamEnd] {
                [length]: 0,
                [name]: 'onReadableStreamEnd',
                [prototype]: { [constructor]: [Circular *140] }
              },
              error: [Function: bound onceWrapper] {
                [length]: 0,
                [name]: 'bound onceWrapper',
                listener: <ref *141> [Function: freeSocketErrorListener] {
                  [length]: 1,
                  [name]: 'freeSocketErrorListener',
                  [prototype]: { [constructor]: [Circular *141] }
                }
              },
              newListener: <ref *142> [Function: keylogNewListener] {
                [length]: 1,
                [name]: 'keylogNewListener',
                [prototype]: { [constructor]: [Circular *142] }
              },
              connect: undefined,
              secure: <ref *143> [Function: onConnectSecure] {
                [length]: 0,
                [name]: 'onConnectSecure',
                [prototype]: { [constructor]: [Circular *143] }
              },
              session: [Function (anonymous)] { [length]: 1, [name]: '' },
              free: <ref *144> [Function: onFree] {
                [length]: 0,
                [name]: 'onFree',
                [prototype]: { [constructor]: [Circular *144] }
              },
              timeout: <ref *145> [Function: onTimeout] {
                [length]: 0,
                [name]: 'onTimeout',
                [prototype]: { [constructor]: [Circular *145] }
              },
              agentRemove: <ref *146> [Function: onRemove] {
                [length]: 0,
                [name]: 'onRemove',
                [prototype]: { [constructor]: [Circular *146] }
              },
              data: undefined,
              drain: undefined
            },
            _eventsCount: 9,
            connecting: false,
            _hadError: false,
            _parent: null,
            _host: 'speech.googleapis.com',
            _closeAfterHandlingError: false,
            _readableState: ReadableState {
              highWaterMark: 16384,
              buffer: [ [length]: 0 ],
              bufferIndex: 0,
              length: 0,
              pipes: [ [length]: 0 ],
              awaitDrainWriters: null,
              [Symbol(kState)]: 60303620,
              [objectMode]: [Getter/Setter],
              [ended]: [Getter/Setter],
              [endEmitted]: [Getter/Setter],
              [reading]: [Getter/Setter],
              [constructed]: [Getter/Setter],
              [sync]: [Getter/Setter],
              [needReadable]: [Getter/Setter],
              [emittedReadable]: [Getter/Setter],
              [readableListening]: [Getter/Setter],
              [resumeScheduled]: [Getter/Setter],
              [errorEmitted]: [Getter/Setter],
              [emitClose]: [Getter/Setter],
              [autoDestroy]: [Getter/Setter],
              [destroyed]: [Getter/Setter],
              [closed]: [Getter/Setter],
              [closeEmitted]: [Getter/Setter],
              [multiAwaitDrain]: [Getter/Setter],
              [readingMore]: [Getter/Setter],
              [dataEmitted]: [Getter/Setter],
              [errored]: [Getter/Setter],
              [defaultEncoding]: [Getter/Setter],
              [decoder]: [Getter/Setter],
              [encoding]: [Getter/Setter],
              [flowing]: [Getter/Setter],
              [pipesCount]: [Getter],
              [paused]: [Getter/Setter]
            },
            _writableState: WritableState {
              highWaterMark: 16384,
              length: 0,
              corked: 0,
              onwrite: [Function: bound onwrite] {
                [length]: 1,
                [name]: 'bound onwrite'
              },
              writelen: 0,
              bufferedIndex: 0,
              pendingcb: 0,
              [Symbol(kState)]: 17563908,
              [Symbol(kBufferedValue)]: null,
              [Symbol(kWriteCbValue)]: [Function (anonymous)] { [length]: 1, [name]: '' },
              [objectMode]: [Getter/Setter],
              [finalCalled]: [Getter/Setter],
              [needDrain]: [Getter/Setter],
              [ending]: [Getter/Setter],
              [ended]: [Getter/Setter],
              [finished]: [Getter/Setter],
              [destroyed]: [Getter/Setter],
              [decodeStrings]: [Getter/Setter],
              [writing]: [Getter/Setter],
              [sync]: [Getter/Setter],
              [bufferProcessing]: [Getter/Setter],
              [constructed]: [Getter/Setter],
              [prefinished]: [Getter/Setter],
              [errorEmitted]: [Getter/Setter],
              [emitClose]: [Getter/Setter],
              [autoDestroy]: [Getter/Setter],
              [closed]: [Getter/Setter],
              [closeEmitted]: [Getter/Setter],
              [allBuffers]: [Getter/Setter],
              [allNoop]: [Getter/Setter],
              [errored]: [Getter/Setter],
              [writable]: [Getter/Setter],
              [defaultEncoding]: [Getter/Setter],
              [writecb]: [Getter/Setter],
              [afterWriteTickInfo]: [Getter/Setter],
              [buffered]: [Getter/Setter],
              [bufferedRequestCount]: [Getter]
            },
            allowHalfOpen: false,
            _maxListeners: undefined,
            _sockname: null,
            _pendingData: null,
            _pendingEncoding: '',
            server: undefined,
            _server: null,
            ssl: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *147],
                [owner]: [Getter/Setter],
                writeQueueSize: [Getter],
                [fd]: [Getter],
                [_externalStream]: [Getter],
                [bytesRead]: [Getter],
                [bytesWritten]: [Getter],
                isStreamBase: true
              },
              _parentWrap: null,
              _secureContext: SecureContext {
                context: SecureContext { _external: [Getter] }
              },
              reading: true,
              onkeylog: <ref *148> [Function: onkeylog] {
                [length]: 1,
                [name]: 'onkeylog',
                [prototype]: { [constructor]: [Circular *148] }
              },
              onhandshakestart: <ref *149> {
                [length]: 0,
                [name]: '',
                [arguments]: [Getter/Setter],
                [caller]: [Getter/Setter],
                [constructor]: [Function: Function] {
                  [length]: 1,
                  [name]: 'Function',
                  [prototype]: [Circular *149]
                },
                [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
                [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                [call]: [Function: call] { [length]: 1, [name]: 'call' },
                [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
                [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                  [length]: 1,
                  [name]: '[Symbol.hasInstance]'
                }
              },
              onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
              onocspresponse: <ref *150> [Function: onocspresponse] {
                [length]: 1,
                [name]: 'onocspresponse',
                [prototype]: { [constructor]: [Circular *150] }
              },
              onnewsession: <ref *151> [Function: onnewsessionclient] {
                [length]: 2,
                [name]: 'onnewsessionclient',
                [prototype]: { [constructor]: [Circular *151] }
              },
              onerror: <ref *152> [Function: onerror] {
                [length]: 1,
                [name]: 'onerror',
                [prototype]: { [constructor]: [Circular *152] }
              },
              [Symbol(owner_symbol)]: [Circular *147],
              writeQueueSize: [Getter],
              [fd]: [Getter],
              [_externalStream]: [Getter],
              [bytesRead]: [Getter],
              [bytesWritten]: [Getter],
              isStreamBase: true
            },
            _requestCert: true,
            _rejectUnauthorized: true,
            timeout: 5000,
            parser: null,
            _httpMessage: null,
            autoSelectFamilyAttemptedAddresses: [ '142.250.194.138:443', [length]: 1 ],
            [Symbol(alpncallback)]: null,
            [Symbol(res)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *147],
                [owner]: [Getter/Setter],
                writeQueueSize: [Getter],
                [fd]: [Getter],
                [_externalStream]: [Getter],
                [bytesRead]: [Getter],
                [bytesWritten]: [Getter],
                isStreamBase: true
              },
              _parentWrap: null,
              _secureContext: SecureContext {
                context: SecureContext { _external: [Getter] }
              },
              reading: true,
              onkeylog: <ref *148> [Function: onkeylog] {
                [length]: 1,
                [name]: 'onkeylog',
                [prototype]: { [constructor]: [Circular *148] }
              },
              onhandshakestart: <ref *149> {
                [length]: 0,
                [name]: '',
                [arguments]: [Getter/Setter],
                [caller]: [Getter/Setter],
                [constructor]: [Function: Function] {
                  [length]: 1,
                  [name]: 'Function',
                  [prototype]: [Circular *149]
                },
                [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
                [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                [call]: [Function: call] { [length]: 1, [name]: 'call' },
                [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
                [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                  [length]: 1,
                  [name]: '[Symbol.hasInstance]'
                }
              },
              onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
              onocspresponse: <ref *150> [Function: onocspresponse] {
                [length]: 1,
                [name]: 'onocspresponse',
                [prototype]: { [constructor]: [Circular *150] }
              },
              onnewsession: <ref *151> [Function: onnewsessionclient] {
                [length]: 2,
                [name]: 'onnewsessionclient',
                [prototype]: { [constructor]: [Circular *151] }
              },
              onerror: <ref *152> [Function: onerror] {
                [length]: 1,
                [name]: 'onerror',
                [prototype]: { [constructor]: [Circular *152] }
              },
              [Symbol(owner_symbol)]: [Circular *147],
              writeQueueSize: [Getter],
              [fd]: [Getter],
              [_externalStream]: [Getter],
              [bytesRead]: [Getter],
              [bytesWritten]: [Getter],
              isStreamBase: true
            },
            [Symbol(verified)]: true,
            [Symbol(pendingSession)]: null,
            [Symbol(async_id_symbol)]: -1,
            [Symbol(kHandle)]: TLSWrap {
              _parent: TCP {
                reading: [Getter/Setter],
                onconnection: null,
                [Symbol(owner_symbol)]: [Circular *147],
                [owner]: [Getter/Setter],
                writeQueueSize: [Getter],
                [fd]: [Getter],
                [_externalStream]: [Getter],
                [bytesRead]: [Getter],
                [bytesWritten]: [Getter],
                isStreamBase: true
              },
              _parentWrap: null,
              _secureContext: SecureContext {
                context: SecureContext { _external: [Getter] }
              },
              reading: true,
              onkeylog: <ref *148> [Function: onkeylog] {
                [length]: 1,
                [name]: 'onkeylog',
                [prototype]: { [constructor]: [Circular *148] }
              },
              onhandshakestart: <ref *149> {
                [length]: 0,
                [name]: '',
                [arguments]: [Getter/Setter],
                [caller]: [Getter/Setter],
                [constructor]: [Function: Function] {
                  [length]: 1,
                  [name]: 'Function',
                  [prototype]: [Circular *149]
                },
                [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
                [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                [call]: [Function: call] { [length]: 1, [name]: 'call' },
                [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
                [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                  [length]: 1,
                  [name]: '[Symbol.hasInstance]'
                }
              },
              onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
              onocspresponse: <ref *150> [Function: onocspresponse] {
                [length]: 1,
                [name]: 'onocspresponse',
                [prototype]: { [constructor]: [Circular *150] }
              },
              onnewsession: <ref *151> [Function: onnewsessionclient] {
                [length]: 2,
                [name]: 'onnewsessionclient',
                [prototype]: { [constructor]: [Circular *151] }
              },
              onerror: <ref *152> [Function: onerror] {
                [length]: 1,
                [name]: 'onerror',
                [prototype]: { [constructor]: [Circular *152] }
              },
              [Symbol(owner_symbol)]: [Circular *147],
              writeQueueSize: [Getter],
              [fd]: [Getter],
              [_externalStream]: [Getter],
              [bytesRead]: [Getter],
              [bytesWritten]: [Getter],
              isStreamBase: true
            },
            [Symbol(lastWriteQueueSize)]: 0,
            [Symbol(timeout)]: Timeout {
              _idleTimeout: 5000,
              _idlePrev: [TimersList],
              _idleNext: [Timeout],
              _idleStart: 4946,
              _onTimeout: [Function],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(refed)]: false,
              [Symbol(kHasPrimitive)]: false,
              [Symbol(asyncId)]: 47,
              [Symbol(triggerId)]: 45
            },
            [Symbol(kBuffer)]: null,
            [Symbol(kBufferCb)]: null,
            [Symbol(kBufferGen)]: null,
            [Symbol(shapeMode)]: true,
            [Symbol(kCapture)]: false,
            [Symbol(kSetNoDelay)]: false,
            [Symbol(kSetKeepAlive)]: true,
            [Symbol(kSetKeepAliveInitialDelay)]: 1,
            [Symbol(kBytesRead)]: 0,
            [Symbol(kBytesWritten)]: 0,
            [Symbol(connect-options)]: {
              rejectUnauthorized: true,
              ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
              checkServerIdentity: <ref *153> [Function: checkServerIdentity] {
                [length]: 2,
                [name]: 'checkServerIdentity',
                [prototype]: { [constructor]: [Circular *153] }
              },
              minDHSize: 1024,
              maxRedirects: 21,
              maxBodyLength: Infinity,
              protocol: 'https:',
              path: null,
              method: 'POST',
              headers: [Object: null prototype] {
                Accept: 'application/json, text/plain, */*',
                'Content-Type': 'application/json',
                'User-Agent': 'axios/1.7.7',
                'Content-Length': '107708',
                'Accept-Encoding': 'gzip, compress, deflate, br'
              },
              agents: { http: undefined, https: undefined },
              auth: undefined,
              family: undefined,
              beforeRedirect: <ref *154> [Function: dispatchBeforeRedirect] {
                [length]: 2,
                [name]: 'dispatchBeforeRedirect',
                [prototype]: { [constructor]: [Circular *154] }
              },
              beforeRedirects: {
                proxy: <ref *155> [Function: beforeRedirect] {
                  [length]: 1,
                  [name]: 'beforeRedirect',
                  [prototype]: { [constructor]: [Circular *155] }
                }
              },
              hostname: 'speech.googleapis.com',
              port: 443,
              agent: undefined,
              nativeProtocols: {
                'http:': {
                  _connectionListener: <ref *156> [Function: connectionListener] {
                    [length]: 1,
                    [name]: 'connectionListener',
                    [prototype]: { [constructor]: [Circular *156] }
                  },
                  METHODS: [
                    'ACL',         'BIND',       'CHECKOUT',
                    'CONNECT',     'COPY',       'DELETE',
                    'GET',         'HEAD',       'LINK',
                    'LOCK',        'M-SEARCH',   'MERGE',
                    'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                    'MOVE',        'NOTIFY',     'OPTIONS',
                    'PATCH',       'POST',       'PROPFIND',
                    'PROPPATCH',   'PURGE',      'PUT',
                    'REBIND',      'REPORT',     'SEARCH',
                    'SOURCE',      'SUBSCRIBE',  'TRACE',
                    'UNBIND',      'UNLINK',     'UNLOCK',
                    'UNSUBSCRIBE', [length]: 34
                  ],
                  STATUS_CODES: {
                    '100': 'Continue',
                    '101': 'Switching Protocols',
                    '102': 'Processing',
                    '103': 'Early Hints',
                    '200': 'OK',
                    '201': 'Created',
                    '202': 'Accepted',
                    '203': 'Non-Authoritative Information',
                    '204': 'No Content',
                    '205': 'Reset Content',
                    '206': 'Partial Content',
                    '207': 'Multi-Status',
                    '208': 'Already Reported',
                    '226': 'IM Used',
                    '300': 'Multiple Choices',
                    '301': 'Moved Permanently',
                    '302': 'Found',
                    '303': 'See Other',
                    '304': 'Not Modified',
                    '305': 'Use Proxy',
                    '307': 'Temporary Redirect',
                    '308': 'Permanent Redirect',
                    '400': 'Bad Request',
                    '401': 'Unauthorized',
                    '402': 'Payment Required',
                    '403': 'Forbidden',
                    '404': 'Not Found',
                    '405': 'Method Not Allowed',
                    '406': 'Not Acceptable',
                    '407': 'Proxy Authentication Required',
                    '408': 'Request Timeout',
                    '409': 'Conflict',
                    '410': 'Gone',
                    '411': 'Length Required',
                    '412': 'Precondition Failed',
                    '413': 'Payload Too Large',
                    '414': 'URI Too Long',
                    '415': 'Unsupported Media Type',
                    '416': 'Range Not Satisfiable',
                    '417': 'Expectation Failed',
                    '418': "I'm a Teapot",
                    '421': 'Misdirected Request',
                    '422': 'Unprocessable Entity',
                    '423': 'Locked',
                    '424': 'Failed Dependency',
                    '425': 'Too Early',
                    '426': 'Upgrade Required',
                    '428': 'Precondition Required',
                    '429': 'Too Many Requests',
                    '431': 'Request Header Fields Too Large',
                    '451': 'Unavailable For Legal Reasons',
                    '500': 'Internal Server Error',
                    '501': 'Not Implemented',
                    '502': 'Bad Gateway',
                    '503': 'Service Unavailable',
                    '504': 'Gateway Timeout',
                    '505': 'HTTP Version Not Supported',
                    '506': 'Variant Also Negotiates',
                    '507': 'Insufficient Storage',
                    '508': 'Loop Detected',
                    '509': 'Bandwidth Limit Exceeded',
                    '510': 'Not Extended',
                    '511': 'Network Authentication Required'
                  },
                  Agent: <ref *157> [Function: Agent] {
                    [length]: 1,
                    [name]: 'Agent',
                    [prototype]: EventEmitter {
                      [constructor]: [Circular *157],
                      createConnection: <ref *158> [Function: connect] {
                        [length]: 0,
                        [name]: 'connect',
                        [prototype]: { [constructor]: [Circular *158] }
                      },
                      getName: <ref *159> [Function: getName] {
                        [length]: 0,
                        [name]: 'getName',
                        [prototype]: { [constructor]: [Circular *159] }
                      },
                      addRequest: <ref *160> [Function: addRequest] {
                        [length]: 4,
                        [name]: 'addRequest',
                        [prototype]: { [constructor]: [Circular *160] }
                      },
                      createSocket: <ref *161> [Function: createSocket] {
                        [length]: 3,
                        [name]: 'createSocket',
                        [prototype]: { [constructor]: [Circular *161] }
                      },
                      removeSocket: <ref *162> [Function: removeSocket] {
                        [length]: 2,
                        [name]: 'removeSocket',
                        [prototype]: { [constructor]: [Circular *162] }
                      },
                      keepSocketAlive: <ref *163> [Function: keepSocketAlive] {
                        [length]: 1,
                        [name]: 'keepSocketAlive',
                        [prototype]: { [constructor]: [Circular *163] }
                      },
                      reuseSocket: <ref *164> [Function: reuseSocket] {
                        [length]: 2,
                        [name]: 'reuseSocket',
                        [prototype]: { [constructor]: [Circular *164] }
                      },
                      destroy: <ref *165> [Function: destroy] {
                        [length]: 0,
                        [name]: 'destroy',
                        [prototype]: { [constructor]: [Circular *165] }
                      },
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    defaultMaxSockets: Infinity,
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  ClientRequest: <ref *166> [Function: ClientRequest] {
                    [length]: 3,
                    [name]: 'ClientRequest',
                    [prototype]: OutgoingMessage {
                      [constructor]: [Circular *166],
                      _finish: <ref *167> [Function: _finish] {
                        [length]: 0,
                        [name]: '_finish',
                        [prototype]: { [constructor]: [Circular *167] }
                      },
                      _implicitHeader: <ref *168> [Function: _implicitHeader] {
                        [length]: 0,
                        [name]: '_implicitHeader',
                        [prototype]: { [constructor]: [Circular *168] }
                      },
                      abort: <ref *169> [Function: abort] {
                        [length]: 0,
                        [name]: 'abort',
                        [prototype]: { [constructor]: [Circular *169] }
                      },
                      destroy: <ref *170> [Function: destroy] {
                        [length]: 1,
                        [name]: 'destroy',
                        [prototype]: { [constructor]: [Circular *170] }
                      },
                      onSocket: <ref *171> [Function: onSocket] {
                        [length]: 2,
                        [name]: 'onSocket',
                        [prototype]: { [constructor]: [Circular *171] }
                      },
                      _deferToConnect: <ref *172> [Function: _deferToConnect] {
                        [length]: 2,
                        [name]: '_deferToConnect',
                        [prototype]: { [constructor]: [Circular *172] }
                      },
                      setTimeout: <ref *173> [Function: setTimeout] {
                        [length]: 2,
                        [name]: 'setTimeout',
                        [prototype]: { [constructor]: [Circular *173] }
                      },
                      setNoDelay: <ref *174> [Function: setNoDelay] {
                        [length]: 1,
                        [name]: 'setNoDelay',
                        [prototype]: { [constructor]: [Circular *174] }
                      },
                      setSocketKeepAlive: <ref *175> [Function: setSocketKeepAlive] {
                        [length]: 2,
                        [name]: 'setSocketKeepAlive',
                        [prototype]: { [constructor]: [Circular *175] }
                      },
                      clearTimeout: <ref *176> [Function: clearTimeout] {
                        [length]: 1,
                        [name]: 'clearTimeout',
                        [prototype]: { [constructor]: [Circular *176] }
                      },
                      [errored]: [Getter],
                      [closed]: [Getter],
                      [writableFinished]: [Getter],
                      [writableObjectMode]: [Getter],
                      [writableLength]: [Getter],
                      [writableHighWaterMark]: [Getter],
                      [writableCorked]: [Getter],
                      [_headers]: [Getter/Setter],
                      [connection]: [Getter/Setter],
                      [_headerNames]: [Getter/Setter],
                      headersSent: [Getter],
                      [writableEnded]: [Getter],
                      [writableNeedDrain]: [Getter],
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    promises: [Getter],
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  IncomingMessage: <ref *177> [Function: IncomingMessage] {
                    [length]: 1,
                    [name]: 'IncomingMessage',
                    [prototype]: Readable {
                      [constructor]: [Circular *177],
                      [connection]: [Getter/Setter],
                      [headers]: [Getter/Setter],
                      [headersDistinct]: [Getter/Setter],
                      [trailers]: [Getter/Setter],
                      [trailersDistinct]: [Getter/Setter],
                      setTimeout: <ref *178> [Function: setTimeout] {
                        [length]: 2,
                        [name]: 'setTimeout',
                        [prototype]: { [constructor]: [Circular *178] }
                      },
                      _read: <ref *179> [Function: _read] {
                        [length]: 1,
                        [name]: '_read',
                        [prototype]: { [constructor]: [Circular *179] }
                      },
                      _destroy: <ref *180> [Function: _destroy] {
                        [length]: 2,
                        [name]: '_destroy',
                        [prototype]: { [constructor]: [Circular *180] }
                      },
                      _addHeaderLines: <ref *181> [Function: _addHeaderLines] {
                        [length]: 2,
                        [name]: '_addHeaderLines',
                        [prototype]: { [constructor]: [Circular *181] }
                      },
                      _addHeaderLine: <ref *182> [Function: _addHeaderLine] {
                        [length]: 3,
                        [name]: '_addHeaderLine',
                        [prototype]: { [constructor]: [Circular *182] }
                      },
                      _addHeaderLineDistinct: <ref *183> [Function: _addHeaderLineDistinct] {
                        [length]: 3,
                        [name]: '_addHeaderLineDistinct',
                        [prototype]: { [constructor]: [Circular *183] }
                      },
                      _dump: <ref *184> [Function: _dump] {
                        [length]: 0,
                        [name]: '_dump',
                        [prototype]: { [constructor]: [Circular *184] }
                      },
                      [readable]: [Getter/Setter],
                      [readableDidRead]: [Getter],
                      [readableAborted]: [Getter],
                      [readableHighWaterMark]: [Getter],
                      [readableBuffer]: [Getter],
                      [readableFlowing]: [Getter/Setter],
                      [readableLength]: [Getter],
                      [readableObjectMode]: [Getter],
                      [readableEncoding]: [Getter],
                      [errored]: [Getter],
                      [closed]: [Getter],
                      [destroyed]: [Getter/Setter],
                      [readableEnded]: [Getter],
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    promises: [Getter],
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  OutgoingMessage: <ref *185> [Function: OutgoingMessage] {
                    [length]: 1,
                    [name]: 'OutgoingMessage',
                    [prototype]: Stream {
                      [constructor]: [Circular *185],
                      [errored]: [Getter],
                      [closed]: [Getter],
                      [writableFinished]: [Getter],
                      [writableObjectMode]: [Getter],
                      [writableLength]: [Getter],
                      [writableHighWaterMark]: [Getter],
                      [writableCorked]: [Getter],
                      [_headers]: [Getter/Setter],
                      [connection]: [Getter/Setter],
                      [_headerNames]: [Getter/Setter],
                      _renderHeaders: <ref *186> [Function: _renderHeaders] {
                        [length]: 0,
                        [name]: '_renderHeaders',
                        [prototype]: { [constructor]: [Circular *186] }
                      },
                      cork: <ref *187> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *187] }
                      },
                      uncork: <ref *188> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *188] }
                      },
                      setTimeout: <ref *189> [Function: setTimeout] {
                        [length]: 2,
                        [name]: 'setTimeout',
                        [prototype]: { [constructor]: [Circular *189] }
                      },
                      destroy: <ref *190> [Function: destroy] {
                        [length]: 1,
                        [name]: 'destroy',
                        [prototype]: { [constructor]: [Circular *190] }
                      },
                      _send: <ref *191> [Function: _send] {
                        [length]: 4,
                        [name]: '_send',
                        [prototype]: { [constructor]: [Circular *191] }
                      },
                      _writeRaw: <ref *192> [Function: _writeRaw] {
                        [length]: 4,
                        [name]: '_writeRaw',
                        [prototype]: { [constructor]: [Circular *192] }
                      },
                      _storeHeader: <ref *193> [Function: _storeHeader] {
                        [length]: 2,
                        [name]: '_storeHeader',
                        [prototype]: { [constructor]: [Circular *193] }
                      },
                      setHeader: <ref *194> [Function: setHeader] {
                        [length]: 2,
                        [name]: 'setHeader',
                        [prototype]: { [constructor]: [Circular *194] }
                      },
                      setHeaders: <ref *195> [Function: setHeaders] {
                        [length]: 1,
                        [name]: 'setHeaders',
                        [prototype]: { [constructor]: [Circular *195] }
                      },
                      appendHeader: <ref *196> [Function: appendHeader] {
                        [length]: 2,
                        [name]: 'appendHeader',
                        [prototype]: { [constructor]: [Circular *196] }
                      },
                      getHeader: <ref *197> [Function: getHeader] {
                        [length]: 1,
                        [name]: 'getHeader',
                        [prototype]: { [constructor]: [Circular *197] }
                      },
                      getHeaderNames: <ref *198> [Function: getHeaderNames] {
                        [length]: 0,
                        [name]: 'getHeaderNames',
                        [prototype]: { [constructor]: [Circular *198] }
                      },
                      getRawHeaderNames: <ref *199> [Function: getRawHeaderNames] {
                        [length]: 0,
                        [name]: 'getRawHeaderNames',
                        [prototype]: { [constructor]: [Circular *199] }
                      },
                      getHeaders: <ref *200> [Function: getHeaders] {
                        [length]: 0,
                        [name]: 'getHeaders',
                        [prototype]: { [constructor]: [Circular *200] }
                      },
                      hasHeader: <ref *201> [Function: hasHeader] {
                        [length]: 1,
                        [name]: 'hasHeader',
                        [prototype]: { [constructor]: [Circular *201] }
                      },
                      removeHeader: <ref *202> [Function: removeHeader] {
                        [length]: 1,
                        [name]: 'removeHeader',
                        [prototype]: { [constructor]: [Circular *202] }
                      },
                      _implicitHeader: <ref *203> [Function: _implicitHeader] {
                        [length]: 0,
                        [name]: '_implicitHeader',
                        [prototype]: { [constructor]: [Circular *203] }
                      },
                      headersSent: [Getter],
                      [writableEnded]: [Getter],
                      [writableNeedDrain]: [Getter],
                      write: <ref *204> [Function: write] {
                        [length]: 3,
                        [name]: 'write',
                        [prototype]: { [constructor]: [Circular *204] }
                      },
                      addTrailers: <ref *205> [Function: addTrailers] {
                        [length]: 1,
                        [name]: 'addTrailers',
                        [prototype]: { [constructor]: [Circular *205] }
                      },
                      end: <ref *206> [Function: end] {
                        [length]: 3,
                        [name]: 'end',
                        [prototype]: { [constructor]: [Circular *206] }
                      },
                      _finish: <ref *207> [Function: _finish] {
                        [length]: 0,
                        [name]: '_finish',
                        [prototype]: { [constructor]: [Circular *207] }
                      },
                      _flush: <ref *208> [Function: _flush] {
                        [length]: 0,
                        [name]: '_flush',
                        [prototype]: { [constructor]: [Circular *208] }
                      },
                      _flushOutput: <ref *209> [Function: _flushOutput] {
                        [length]: 1,
                        [name]: '_flushOutput',
                        [prototype]: { [constructor]: [Circular *209] }
                      },
                      flushHeaders: <ref *210> [Function: flushHeaders] {
                        [length]: 0,
                        [name]: 'flushHeaders',
                        [prototype]: { [constructor]: [Circular *210] }
                      },
                      pipe: <ref *211> [Function: pipe] {
                        [length]: 0,
                        [name]: 'pipe',
                        [prototype]: { [constructor]: [Circular *211] }
                      },
                      [Symbol(nodejs.rejection)]: <ref *212> [Function (anonymous)] {
                        [length]: 2,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *212] }
                      },
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    promises: [Getter],
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  Server: <ref *213> [Function: Server] {
                    [length]: 2,
                    [name]: 'Server',
                    [prototype]: Server {
                      [constructor]: [Circular *213],
                      close: <ref *214> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *214] }
                      },
                      closeAllConnections: <ref *215> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *215] }
                      },
                      closeIdleConnections: <ref *216> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *216] }
                      },
                      setTimeout: <ref *217> [Function: setTimeout] {
                        [length]: 2,
                        [name]: 'setTimeout',
                        [prototype]: { [constructor]: [Circular *217] }
                      },
                      [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                      },
                      [Symbol(nodejs.rejection)]: <ref *218> [Function (anonymous)] {
                        [length]: 2,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *218] }
                      },
                      listening: [Getter],
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  ServerResponse: <ref *219> [Function: ServerResponse] {
                    [length]: 2,
                    [name]: 'ServerResponse',
                    [prototype]: OutgoingMessage {
                      [constructor]: [Circular *219],
                      _finish: <ref *220> [Function: _finish] {
                        [length]: 0,
                        [name]: '_finish',
                        [prototype]: { [constructor]: [Circular *220] }
                      },
                      statusCode: 200,
                      statusMessage: undefined,
                      assignSocket: <ref *221> [Function: assignSocket] {
                        [length]: 1,
                        [name]: 'assignSocket',
                        [prototype]: { [constructor]: [Circular *221] }
                      },
                      detachSocket: <ref *222> [Function: detachSocket] {
                        [length]: 1,
                        [name]: 'detachSocket',
                        [prototype]: { [constructor]: [Circular *222] }
                      },
                      writeContinue: <ref *223> [Function: writeContinue] {
                        [length]: 1,
                        [name]: 'writeContinue',
                        [prototype]: { [constructor]: [Circular *223] }
                      },
                      writeProcessing: <ref *224> [Function: writeProcessing] {
                        [length]: 1,
                        [name]: 'writeProcessing',
                        [prototype]: { [constructor]: [Circular *224] }
                      },
                      writeEarlyHints: <ref *225> [Function: writeEarlyHints] {
                        [length]: 2,
                        [name]: 'writeEarlyHints',
                        [prototype]: { [constructor]: [Circular *225] }
                      },
                      _implicitHeader: <ref *226> [Function: _implicitHeader] {
                        [length]: 0,
                        [name]: '_implicitHeader',
                        [prototype]: { [constructor]: [Circular *226] }
                      },
                      writeHead: <ref *227> [Function: writeHead] {
                        [length]: 3,
                        [name]: 'writeHead',
                        [prototype]: { [constructor]: [Circular *227] }
                      },
                      writeHeader: <ref *227> [Function: writeHead] {
                        [length]: 3,
                        [name]: 'writeHead',
                        [prototype]: { [constructor]: [Circular *227] }
                      },
                      [errored]: [Getter],
                      [closed]: [Getter],
                      [writableFinished]: [Getter],
                      [writableObjectMode]: [Getter],
                      [writableLength]: [Getter],
                      [writableHighWaterMark]: [Getter],
                      [writableCorked]: [Getter],
                      [_headers]: [Getter/Setter],
                      [connection]: [Getter/Setter],
                      [_headerNames]: [Getter/Setter],
                      headersSent: [Getter],
                      [writableEnded]: [Getter],
                      [writableNeedDrain]: [Getter],
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    promises: [Getter],
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  createServer: <ref *228> [Function: createServer] {
                    [length]: 2,
                    [name]: 'createServer',
                    [prototype]: { [constructor]: [Circular *228] }
                  },
                  validateHeaderName: <ref *229> [Function: wrappedFn] {
                    [length]: 0,
                    [name]: 'wrappedFn',
                    [prototype]: { [constructor]: [Circular *229] },
                    withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
                  },
                  validateHeaderValue: <ref *230> [Function: wrappedFn] {
                    [length]: 0,
                    [name]: 'wrappedFn',
                    [prototype]: { [constructor]: [Circular *230] },
                    withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
                  },
                  get: <ref *231> [Function: get] {
                    [length]: 3,
                    [name]: 'get',
                    [prototype]: { [constructor]: [Circular *231] }
                  },
                  request: <ref *232> [Function: request] {
                    [length]: 3,
                    [name]: 'request',
                    [prototype]: { [constructor]: [Circular *232] }
                  },
                  setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers] {
                    [length]: 1,
                    [name]: 'setMaxIdleHTTPParsers'
                  },
                  maxHeaderSize: [Getter],
                  globalAgent: [Getter/Setter]
                },
                'https:': {
                  Agent: <ref *233> [Function: Agent] {
                    [length]: 1,
                    [name]: 'Agent',
                    [prototype]: Agent {
                      [constructor]: [Circular *233],
                      createConnection: <ref *234> [Function: createConnection] {
                        [length]: 3,
                        [name]: 'createConnection',
                        [prototype]: { [constructor]: [Circular *234] }
                      },
                      getName: <ref *235> [Function: getName] {
                        [length]: 0,
                        [name]: 'getName',
                        [prototype]: { [constructor]: [Circular *235] }
                      },
                      _getSession: <ref *236> [Function: _getSession] {
                        [length]: 1,
                        [name]: '_getSession',
                        [prototype]: { [constructor]: [Circular *236] }
                      },
                      _cacheSession: <ref *237> [Function: _cacheSession] {
                        [length]: 2,
                        [name]: '_cacheSession',
                        [prototype]: { [constructor]: [Circular *237] }
                      },
                      _evictSession: <ref *238> [Function: _evictSession] {
                        [length]: 1,
                        [name]: '_evictSession',
                        [prototype]: { [constructor]: [Circular *238] }
                      },
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    defaultMaxSockets: Infinity,
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  globalAgent: [Circular *245],
                  Server: <ref *240> [Function: Server] {
                    [length]: 2,
                    [name]: 'Server',
                    [prototype]: Server {
                      [constructor]: [Circular *240],
                      closeAllConnections: <ref *215> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *215] }
                      },
                      closeIdleConnections: <ref *216> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *216] }
                      },
                      setTimeout: <ref *217> [Function: setTimeout] {
                        [length]: 2,
                        [name]: 'setTimeout',
                        [prototype]: { [constructor]: [Circular *217] }
                      },
                      close: <ref *241> [Function (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [prototype]: { [constructor]: [Circular *241] }
                      },
                      [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                        [length]: 0,
                        [name]: '',
                        [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                      },
                      listening: [Getter],
                      _events: undefined,
                      _eventsCount: 0,
                      _maxListeners: undefined,
                      [Symbol(kCapture)]: false
                    },
                    usingDomains: false,
                    captureRejectionSymbol: Symbol(nodejs.rejection),
                    captureRejections: [Getter/Setter],
                    EventEmitterAsyncResource: [Getter],
                    errorMonitor: Symbol(events.errorMonitor),
                    defaultMaxListeners: [Getter/Setter],
                    [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                    [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
                  },
                  createServer: <ref *242> [Function: createServer] {
                    [length]: 2,
                    [name]: 'createServer',
                    [prototype]: { [constructor]: [Circular *242] }
                  },
                  get: <ref *243> [Function: get] {
                    [length]: 3,
                    [name]: 'get',
                    [prototype]: { [constructor]: [Circular *243] }
                  },
                  request: <ref *244> [Function: request] {
                    [length]: 0,
                    [name]: 'request',
                    [prototype]: { [constructor]: [Circular *244] }
                  }
                }
              },
              pathname: '/v1/speech:recognize',
              search: '?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
              _defaultAgent: [Circular *245],
              host: 'speech.googleapis.com',
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              servername: 'speech.googleapis.com',
              _agentKey: 'speech.googleapis.com:443:::::::::::::::::::::',
              encoding: null,
              keepAliveInitialDelay: 1000
            },
            [_connecting]: [Getter],
            [pending]: [Getter],
            [readyState]: [Getter],
            [bufferSize]: [Getter],
            bytesRead: [Getter],
            remoteAddress: [Getter],
            remoteFamily: [Getter],
            remotePort: [Getter],
            localAddress: [Getter],
            localPort: [Getter],
            localFamily: [Getter],
            _bytesDispatched: [Getter],
            bytesWritten: [Getter],
            [_handle]: [Getter/Setter],
            [Symbol(kUpdateTimer)]: [Getter],
            [writable]: [Getter/Setter],
            [writableHighWaterMark]: [Getter],
            [writableObjectMode]: [Getter],
            [writableBuffer]: [Getter],
            [writableLength]: [Getter],
            [writableFinished]: [Getter],
            [writableCorked]: [Getter],
            [writableEnded]: [Getter],
            [writableNeedDrain]: [Getter],
            [destroyed]: [Getter/Setter]
          },
          [length]: 1
        ]
      },
      keepAliveMsecs: 1000,
      keepAlive: true,
      maxSockets: Infinity,
      maxFreeSockets: 256,
      scheduling: 'lifo',
      maxTotalSockets: Infinity,
      totalSocketCount: 1,
      maxCachedSessions: 100,
      _sessionCache: {
        map: {
          'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
        },
        list: [
          'speech.googleapis.com:443:::::::::::::::::::::',
          [length]: 1
        ]
      },
      [Symbol(shapeMode)]: false,
      [Symbol(kCapture)]: false
    },
    socketPath: undefined,
    method: 'POST',
    maxHeaderSize: undefined,
    insecureHTTPParser: undefined,
    joinDuplicateHeaders: undefined,
    path: '/v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
    _ended: true,
    res: IncomingMessage {
      _events: {
        close: [
          [Function (anonymous)] { [length]: 0, [name]: '' },
          [Function: onclose] { [length]: 0, [name]: 'onclose' },
          [Function: onclose] { [length]: 0, [name]: 'onclose' },
          [length]: 3
        ],
        error: [
          [Function: onerror] { [length]: 1, [name]: 'onerror' },
          <ref *246> [Function: onError] {
            [length]: 1,
            [name]: 'onError',
            [prototype]: { [constructor]: [Circular *246] }
          },
          [Function: onerror] { [length]: 1, [name]: 'onerror' },
          [length]: 3
        ],
        data: undefined,
        end: [
          <ref *247> [Function: responseOnEnd] {
            [length]: 0,
            [name]: 'responseOnEnd',
            [prototype]: { [constructor]: [Circular *247] }
          },
          [Function: onend] { [length]: 0, [name]: 'onend' },
          [Function: onend] { [length]: 0, [name]: 'onend' },
          [length]: 3
        ],
        readable: undefined,
        finish: [
          [Function: onfinish] { [length]: 0, [name]: 'onfinish' },
          [Function: onfinish] { [length]: 0, [name]: 'onfinish' },
          [length]: 2
        ]
      },
      _readableState: ReadableState {
        highWaterMark: 16384,
        buffer: [ [length]: 0 ],
        bufferIndex: 0,
        length: 0,
        pipes: [ [length]: 0 ],
        awaitDrainWriters: null,
        [Symbol(kState)]: 110626684,
        [objectMode]: [Getter/Setter],
        [ended]: [Getter/Setter],
        [endEmitted]: [Getter/Setter],
        [reading]: [Getter/Setter],
        [constructed]: [Getter/Setter],
        [sync]: [Getter/Setter],
        [needReadable]: [Getter/Setter],
        [emittedReadable]: [Getter/Setter],
        [readableListening]: [Getter/Setter],
        [resumeScheduled]: [Getter/Setter],
        [errorEmitted]: [Getter/Setter],
        [emitClose]: [Getter/Setter],
        [autoDestroy]: [Getter/Setter],
        [destroyed]: [Getter/Setter],
        [closed]: [Getter/Setter],
        [closeEmitted]: [Getter/Setter],
        [multiAwaitDrain]: [Getter/Setter],
        [readingMore]: [Getter/Setter],
        [dataEmitted]: [Getter/Setter],
        [errored]: [Getter/Setter],
        [defaultEncoding]: [Getter/Setter],
        [decoder]: [Getter/Setter],
        [encoding]: [Getter/Setter],
        [flowing]: [Getter/Setter],
        [pipesCount]: [Getter],
        [paused]: [Getter/Setter]
      },
      _maxListeners: undefined,
      socket: null,
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      rawHeaders: [
        'Content-Type',
        'application/json; charset=UTF-8',
        'Vary',
        'Origin',
        'Vary',
        'X-Origin',
        'Vary',
        'Referer',
        'Content-Encoding',
        'gzip',
        'Date',
        'Sun, 08 Sep 2024 20:53:19 GMT',
        'Server',
        'ESF',
        'Cache-Control',
        'private',
        'X-XSS-Protection',
        '0',
        'X-Frame-Options',
        'SAMEORIGIN',
        'X-Content-Type-Options',
        'nosniff',
        'Alt-Svc',
        'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
        'Transfer-Encoding',
        'chunked',
        [length]: 26
      ],
      rawTrailers: [ [length]: 0 ],
      joinDuplicateHeaders: undefined,
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: <ref *147> TLSSocket {
        _tlsOptions: {
          allowHalfOpen: undefined,
          pipe: false,
          secureContext: SecureContext {
            context: SecureContext { _external: [Getter] }
          },
          isServer: false,
          requestCert: true,
          rejectUnauthorized: true,
          session: undefined,
          ALPNProtocols: undefined,
          requestOCSP: undefined,
          enableTrace: undefined,
          pskCallback: undefined,
          highWaterMark: undefined,
          onread: undefined,
          signal: undefined
        },
        _secureEstablished: true,
        _securePending: false,
        _newSessionPending: false,
        _controlReleased: true,
        secureConnecting: false,
        _SNICallback: null,
        servername: 'speech.googleapis.com',
        alpnProtocol: false,
        authorized: true,
        authorizationError: null,
        encrypted: true,
        _events: [Object: null prototype] {
          close: [
            <ref *138> [Function: onSocketCloseDestroySSL] {
              [length]: 0,
              [name]: 'onSocketCloseDestroySSL',
              [prototype]: { [constructor]: [Circular *138] }
            },
            [Function: bound onceWrapper] {
              [length]: 0,
              [name]: 'bound onceWrapper',
              listener: [Function (anonymous)] { [length]: 1, [name]: '' }
            },
            <ref *139> [Function: onClose] {
              [length]: 1,
              [name]: 'onClose',
              [prototype]: { [constructor]: [Circular *139] }
            },
            [length]: 3
          ],
          end: <ref *140> [Function: onReadableStreamEnd] {
            [length]: 0,
            [name]: 'onReadableStreamEnd',
            [prototype]: { [constructor]: [Circular *140] }
          },
          error: [Function: bound onceWrapper] {
            [length]: 0,
            [name]: 'bound onceWrapper',
            listener: <ref *141> [Function: freeSocketErrorListener] {
              [length]: 1,
              [name]: 'freeSocketErrorListener',
              [prototype]: { [constructor]: [Circular *141] }
            }
          },
          newListener: <ref *142> [Function: keylogNewListener] {
            [length]: 1,
            [name]: 'keylogNewListener',
            [prototype]: { [constructor]: [Circular *142] }
          },
          connect: undefined,
          secure: <ref *143> [Function: onConnectSecure] {
            [length]: 0,
            [name]: 'onConnectSecure',
            [prototype]: { [constructor]: [Circular *143] }
          },
          session: [Function (anonymous)] { [length]: 1, [name]: '' },
          free: <ref *144> [Function: onFree] {
            [length]: 0,
            [name]: 'onFree',
            [prototype]: { [constructor]: [Circular *144] }
          },
          timeout: <ref *145> [Function: onTimeout] {
            [length]: 0,
            [name]: 'onTimeout',
            [prototype]: { [constructor]: [Circular *145] }
          },
          agentRemove: <ref *146> [Function: onRemove] {
            [length]: 0,
            [name]: 'onRemove',
            [prototype]: { [constructor]: [Circular *146] }
          },
          data: undefined,
          drain: undefined
        },
        _eventsCount: 9,
        connecting: false,
        _hadError: false,
        _parent: null,
        _host: 'speech.googleapis.com',
        _closeAfterHandlingError: false,
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [ [length]: 0 ],
          bufferIndex: 0,
          length: 0,
          pipes: [ [length]: 0 ],
          awaitDrainWriters: null,
          [Symbol(kState)]: 60303620,
          [objectMode]: [Getter/Setter],
          [ended]: [Getter/Setter],
          [endEmitted]: [Getter/Setter],
          [reading]: [Getter/Setter],
          [constructed]: [Getter/Setter],
          [sync]: [Getter/Setter],
          [needReadable]: [Getter/Setter],
          [emittedReadable]: [Getter/Setter],
          [readableListening]: [Getter/Setter],
          [resumeScheduled]: [Getter/Setter],
          [errorEmitted]: [Getter/Setter],
          [emitClose]: [Getter/Setter],
          [autoDestroy]: [Getter/Setter],
          [destroyed]: [Getter/Setter],
          [closed]: [Getter/Setter],
          [closeEmitted]: [Getter/Setter],
          [multiAwaitDrain]: [Getter/Setter],
          [readingMore]: [Getter/Setter],
          [dataEmitted]: [Getter/Setter],
          [errored]: [Getter/Setter],
          [defaultEncoding]: [Getter/Setter],
          [decoder]: [Getter/Setter],
          [encoding]: [Getter/Setter],
          [flowing]: [Getter/Setter],
          [pipesCount]: [Getter],
          [paused]: [Getter/Setter]
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 0,
          corked: 0,
          onwrite: [Function: bound onwrite] {
            [length]: 1,
            [name]: 'bound onwrite'
          },
          writelen: 0,
          bufferedIndex: 0,
          pendingcb: 0,
          [Symbol(kState)]: 17563908,
          [Symbol(kBufferedValue)]: null,
          [Symbol(kWriteCbValue)]: [Function (anonymous)] { [length]: 1, [name]: '' },
          [objectMode]: [Getter/Setter],
          [finalCalled]: [Getter/Setter],
          [needDrain]: [Getter/Setter],
          [ending]: [Getter/Setter],
          [ended]: [Getter/Setter],
          [finished]: [Getter/Setter],
          [destroyed]: [Getter/Setter],
          [decodeStrings]: [Getter/Setter],
          [writing]: [Getter/Setter],
          [sync]: [Getter/Setter],
          [bufferProcessing]: [Getter/Setter],
          [constructed]: [Getter/Setter],
          [prefinished]: [Getter/Setter],
          [errorEmitted]: [Getter/Setter],
          [emitClose]: [Getter/Setter],
          [autoDestroy]: [Getter/Setter],
          [closed]: [Getter/Setter],
          [closeEmitted]: [Getter/Setter],
          [allBuffers]: [Getter/Setter],
          [allNoop]: [Getter/Setter],
          [errored]: [Getter/Setter],
          [writable]: [Getter/Setter],
          [defaultEncoding]: [Getter/Setter],
          [writecb]: [Getter/Setter],
          [afterWriteTickInfo]: [Getter/Setter],
          [buffered]: [Getter/Setter],
          [bufferedRequestCount]: [Getter]
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: undefined,
        _server: null,
        ssl: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *147],
            [owner]: [Getter/Setter],
            writeQueueSize: [Getter],
            [fd]: [Getter],
            [_externalStream]: [Getter],
            [bytesRead]: [Getter],
            [bytesWritten]: [Getter],
            isStreamBase: true
          },
          _parentWrap: null,
          _secureContext: SecureContext {
            context: SecureContext { _external: [Getter] }
          },
          reading: true,
          onkeylog: <ref *148> [Function: onkeylog] {
            [length]: 1,
            [name]: 'onkeylog',
            [prototype]: { [constructor]: [Circular *148] }
          },
          onhandshakestart: <ref *149> {
            [length]: 0,
            [name]: '',
            [arguments]: [Getter/Setter],
            [caller]: [Getter/Setter],
            [constructor]: [Function: Function] {
              [length]: 1,
              [name]: 'Function',
              [prototype]: [Circular *149]
            },
            [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
            [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
            [call]: [Function: call] { [length]: 1, [name]: 'call' },
            [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
            [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
              [length]: 1,
              [name]: '[Symbol.hasInstance]'
            }
          },
          onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
          onocspresponse: <ref *150> [Function: onocspresponse] {
            [length]: 1,
            [name]: 'onocspresponse',
            [prototype]: { [constructor]: [Circular *150] }
          },
          onnewsession: <ref *151> [Function: onnewsessionclient] {
            [length]: 2,
            [name]: 'onnewsessionclient',
            [prototype]: { [constructor]: [Circular *151] }
          },
          onerror: <ref *152> [Function: onerror] {
            [length]: 1,
            [name]: 'onerror',
            [prototype]: { [constructor]: [Circular *152] }
          },
          [Symbol(owner_symbol)]: [Circular *147],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        _requestCert: true,
        _rejectUnauthorized: true,
        timeout: 5000,
        parser: null,
        _httpMessage: null,
        autoSelectFamilyAttemptedAddresses: [ '142.250.194.138:443', [length]: 1 ],
        [Symbol(alpncallback)]: null,
        [Symbol(res)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *147],
            [owner]: [Getter/Setter],
            writeQueueSize: [Getter],
            [fd]: [Getter],
            [_externalStream]: [Getter],
            [bytesRead]: [Getter],
            [bytesWritten]: [Getter],
            isStreamBase: true
          },
          _parentWrap: null,
          _secureContext: SecureContext {
            context: SecureContext { _external: [Getter] }
          },
          reading: true,
          onkeylog: <ref *148> [Function: onkeylog] {
            [length]: 1,
            [name]: 'onkeylog',
            [prototype]: { [constructor]: [Circular *148] }
          },
          onhandshakestart: <ref *149> {
            [length]: 0,
            [name]: '',
            [arguments]: [Getter/Setter],
            [caller]: [Getter/Setter],
            [constructor]: [Function: Function] {
              [length]: 1,
              [name]: 'Function',
              [prototype]: [Circular *149]
            },
            [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
            [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
            [call]: [Function: call] { [length]: 1, [name]: 'call' },
            [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
            [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
              [length]: 1,
              [name]: '[Symbol.hasInstance]'
            }
          },
          onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
          onocspresponse: <ref *150> [Function: onocspresponse] {
            [length]: 1,
            [name]: 'onocspresponse',
            [prototype]: { [constructor]: [Circular *150] }
          },
          onnewsession: <ref *151> [Function: onnewsessionclient] {
            [length]: 2,
            [name]: 'onnewsessionclient',
            [prototype]: { [constructor]: [Circular *151] }
          },
          onerror: <ref *152> [Function: onerror] {
            [length]: 1,
            [name]: 'onerror',
            [prototype]: { [constructor]: [Circular *152] }
          },
          [Symbol(owner_symbol)]: [Circular *147],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        [Symbol(verified)]: true,
        [Symbol(pendingSession)]: null,
        [Symbol(async_id_symbol)]: -1,
        [Symbol(kHandle)]: TLSWrap {
          _parent: TCP {
            reading: [Getter/Setter],
            onconnection: null,
            [Symbol(owner_symbol)]: [Circular *147],
            [owner]: [Getter/Setter],
            writeQueueSize: [Getter],
            [fd]: [Getter],
            [_externalStream]: [Getter],
            [bytesRead]: [Getter],
            [bytesWritten]: [Getter],
            isStreamBase: true
          },
          _parentWrap: null,
          _secureContext: SecureContext {
            context: SecureContext { _external: [Getter] }
          },
          reading: true,
          onkeylog: <ref *148> [Function: onkeylog] {
            [length]: 1,
            [name]: 'onkeylog',
            [prototype]: { [constructor]: [Circular *148] }
          },
          onhandshakestart: <ref *149> {
            [length]: 0,
            [name]: '',
            [arguments]: [Getter/Setter],
            [caller]: [Getter/Setter],
            [constructor]: [Function: Function] {
              [length]: 1,
              [name]: 'Function',
              [prototype]: [Circular *149]
            },
            [apply]: [Function: apply] { [length]: 2, [name]: 'apply' },
            [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
            [call]: [Function: call] { [length]: 1, [name]: 'call' },
            [toString]: [Function: toString] { [length]: 0, [name]: 'toString' },
            [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
              [length]: 1,
              [name]: '[Symbol.hasInstance]'
            }
          },
          onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
          onocspresponse: <ref *150> [Function: onocspresponse] {
            [length]: 1,
            [name]: 'onocspresponse',
            [prototype]: { [constructor]: [Circular *150] }
          },
          onnewsession: <ref *151> [Function: onnewsessionclient] {
            [length]: 2,
            [name]: 'onnewsessionclient',
            [prototype]: { [constructor]: [Circular *151] }
          },
          onerror: <ref *152> [Function: onerror] {
            [length]: 1,
            [name]: 'onerror',
            [prototype]: { [constructor]: [Circular *152] }
          },
          [Symbol(owner_symbol)]: [Circular *147],
          writeQueueSize: [Getter],
          [fd]: [Getter],
          [_externalStream]: [Getter],
          [bytesRead]: [Getter],
          [bytesWritten]: [Getter],
          isStreamBase: true
        },
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]: Timeout {
          _idleTimeout: 5000,
          _idlePrev: [TimersList],
          _idleNext: [Timeout],
          _idleStart: 4946,
          _onTimeout: [Function],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(refed)]: false,
          [Symbol(kHasPrimitive)]: false,
          [Symbol(asyncId)]: 47,
          [Symbol(triggerId)]: 45
        },
        [Symbol(kBuffer)]: null,
        [Symbol(kBufferCb)]: null,
        [Symbol(kBufferGen)]: null,
        [Symbol(shapeMode)]: true,
        [Symbol(kCapture)]: false,
        [Symbol(kSetNoDelay)]: false,
        [Symbol(kSetKeepAlive)]: true,
        [Symbol(kSetKeepAliveInitialDelay)]: 1,
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0,
        [Symbol(connect-options)]: {
          rejectUnauthorized: true,
          ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
          checkServerIdentity: <ref *153> [Function: checkServerIdentity] {
            [length]: 2,
            [name]: 'checkServerIdentity',
            [prototype]: { [constructor]: [Circular *153] }
          },
          minDHSize: 1024,
          maxRedirects: 21,
          maxBodyLength: Infinity,
          protocol: 'https:',
          path: null,
          method: 'POST',
          headers: [Object: null prototype] {
            Accept: 'application/json, text/plain, */*',
            'Content-Type': 'application/json',
            'User-Agent': 'axios/1.7.7',
            'Content-Length': '107708',
            'Accept-Encoding': 'gzip, compress, deflate, br'
          },
          agents: { http: undefined, https: undefined },
          auth: undefined,
          family: undefined,
          beforeRedirect: <ref *154> [Function: dispatchBeforeRedirect] {
            [length]: 2,
            [name]: 'dispatchBeforeRedirect',
            [prototype]: { [constructor]: [Circular *154] }
          },
          beforeRedirects: {
            proxy: <ref *155> [Function: beforeRedirect] {
              [length]: 1,
              [name]: 'beforeRedirect',
              [prototype]: { [constructor]: [Circular *155] }
            }
          },
          hostname: 'speech.googleapis.com',
          port: 443,
          agent: undefined,
          nativeProtocols: {
            'http:': {
              _connectionListener: <ref *156> [Function: connectionListener] {
                [length]: 1,
                [name]: 'connectionListener',
                [prototype]: { [constructor]: [Circular *156] }
              },
              METHODS: [
                'ACL',         'BIND',       'CHECKOUT',
                'CONNECT',     'COPY',       'DELETE',
                'GET',         'HEAD',       'LINK',
                'LOCK',        'M-SEARCH',   'MERGE',
                'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
                'MOVE',        'NOTIFY',     'OPTIONS',
                'PATCH',       'POST',       'PROPFIND',
                'PROPPATCH',   'PURGE',      'PUT',
                'REBIND',      'REPORT',     'SEARCH',
                'SOURCE',      'SUBSCRIBE',  'TRACE',
                'UNBIND',      'UNLINK',     'UNLOCK',
                'UNSUBSCRIBE', [length]: 34
              ],
              STATUS_CODES: {
                '100': 'Continue',
                '101': 'Switching Protocols',
                '102': 'Processing',
                '103': 'Early Hints',
                '200': 'OK',
                '201': 'Created',
                '202': 'Accepted',
                '203': 'Non-Authoritative Information',
                '204': 'No Content',
                '205': 'Reset Content',
                '206': 'Partial Content',
                '207': 'Multi-Status',
                '208': 'Already Reported',
                '226': 'IM Used',
                '300': 'Multiple Choices',
                '301': 'Moved Permanently',
                '302': 'Found',
                '303': 'See Other',
                '304': 'Not Modified',
                '305': 'Use Proxy',
                '307': 'Temporary Redirect',
                '308': 'Permanent Redirect',
                '400': 'Bad Request',
                '401': 'Unauthorized',
                '402': 'Payment Required',
                '403': 'Forbidden',
                '404': 'Not Found',
                '405': 'Method Not Allowed',
                '406': 'Not Acceptable',
                '407': 'Proxy Authentication Required',
                '408': 'Request Timeout',
                '409': 'Conflict',
                '410': 'Gone',
                '411': 'Length Required',
                '412': 'Precondition Failed',
                '413': 'Payload Too Large',
                '414': 'URI Too Long',
                '415': 'Unsupported Media Type',
                '416': 'Range Not Satisfiable',
                '417': 'Expectation Failed',
                '418': "I'm a Teapot",
                '421': 'Misdirected Request',
                '422': 'Unprocessable Entity',
                '423': 'Locked',
                '424': 'Failed Dependency',
                '425': 'Too Early',
                '426': 'Upgrade Required',
                '428': 'Precondition Required',
                '429': 'Too Many Requests',
                '431': 'Request Header Fields Too Large',
                '451': 'Unavailable For Legal Reasons',
                '500': 'Internal Server Error',
                '501': 'Not Implemented',
                '502': 'Bad Gateway',
                '503': 'Service Unavailable',
                '504': 'Gateway Timeout',
                '505': 'HTTP Version Not Supported',
                '506': 'Variant Also Negotiates',
                '507': 'Insufficient Storage',
                '508': 'Loop Detected',
                '509': 'Bandwidth Limit Exceeded',
                '510': 'Not Extended',
                '511': 'Network Authentication Required'
              },
              Agent: <ref *157> [Function: Agent] {
                [length]: 1,
                [name]: 'Agent',
                [prototype]: EventEmitter {
                  [constructor]: [Circular *157],
                  createConnection: <ref *158> [Function: connect] {
                    [length]: 0,
                    [name]: 'connect',
                    [prototype]: { [constructor]: [Circular *158] }
                  },
                  getName: <ref *159> [Function: getName] {
                    [length]: 0,
                    [name]: 'getName',
                    [prototype]: { [constructor]: [Circular *159] }
                  },
                  addRequest: <ref *160> [Function: addRequest] {
                    [length]: 4,
                    [name]: 'addRequest',
                    [prototype]: { [constructor]: [Circular *160] }
                  },
                  createSocket: <ref *161> [Function: createSocket] {
                    [length]: 3,
                    [name]: 'createSocket',
                    [prototype]: { [constructor]: [Circular *161] }
                  },
                  removeSocket: <ref *162> [Function: removeSocket] {
                    [length]: 2,
                    [name]: 'removeSocket',
                    [prototype]: { [constructor]: [Circular *162] }
                  },
                  keepSocketAlive: <ref *163> [Function: keepSocketAlive] {
                    [length]: 1,
                    [name]: 'keepSocketAlive',
                    [prototype]: { [constructor]: [Circular *163] }
                  },
                  reuseSocket: <ref *164> [Function: reuseSocket] {
                    [length]: 2,
                    [name]: 'reuseSocket',
                    [prototype]: { [constructor]: [Circular *164] }
                  },
                  destroy: <ref *165> [Function: destroy] {
                    [length]: 0,
                    [name]: 'destroy',
                    [prototype]: { [constructor]: [Circular *165] }
                  },
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                defaultMaxSockets: Infinity,
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              ClientRequest: <ref *166> [Function: ClientRequest] {
                [length]: 3,
                [name]: 'ClientRequest',
                [prototype]: OutgoingMessage {
                  [constructor]: [Circular *166],
                  _finish: <ref *167> [Function: _finish] {
                    [length]: 0,
                    [name]: '_finish',
                    [prototype]: { [constructor]: [Circular *167] }
                  },
                  _implicitHeader: <ref *168> [Function: _implicitHeader] {
                    [length]: 0,
                    [name]: '_implicitHeader',
                    [prototype]: { [constructor]: [Circular *168] }
                  },
                  abort: <ref *169> [Function: abort] {
                    [length]: 0,
                    [name]: 'abort',
                    [prototype]: { [constructor]: [Circular *169] }
                  },
                  destroy: <ref *170> [Function: destroy] {
                    [length]: 1,
                    [name]: 'destroy',
                    [prototype]: { [constructor]: [Circular *170] }
                  },
                  onSocket: <ref *171> [Function: onSocket] {
                    [length]: 2,
                    [name]: 'onSocket',
                    [prototype]: { [constructor]: [Circular *171] }
                  },
                  _deferToConnect: <ref *172> [Function: _deferToConnect] {
                    [length]: 2,
                    [name]: '_deferToConnect',
                    [prototype]: { [constructor]: [Circular *172] }
                  },
                  setTimeout: <ref *173> [Function: setTimeout] {
                    [length]: 2,
                    [name]: 'setTimeout',
                    [prototype]: { [constructor]: [Circular *173] }
                  },
                  setNoDelay: <ref *174> [Function: setNoDelay] {
                    [length]: 1,
                    [name]: 'setNoDelay',
                    [prototype]: { [constructor]: [Circular *174] }
                  },
                  setSocketKeepAlive: <ref *175> [Function: setSocketKeepAlive] {
                    [length]: 2,
                    [name]: 'setSocketKeepAlive',
                    [prototype]: { [constructor]: [Circular *175] }
                  },
                  clearTimeout: <ref *176> [Function: clearTimeout] {
                    [length]: 1,
                    [name]: 'clearTimeout',
                    [prototype]: { [constructor]: [Circular *176] }
                  },
                  [errored]: [Getter],
                  [closed]: [Getter],
                  [writableFinished]: [Getter],
                  [writableObjectMode]: [Getter],
                  [writableLength]: [Getter],
                  [writableHighWaterMark]: [Getter],
                  [writableCorked]: [Getter],
                  [_headers]: [Getter/Setter],
                  [connection]: [Getter/Setter],
                  [_headerNames]: [Getter/Setter],
                  headersSent: [Getter],
                  [writableEnded]: [Getter],
                  [writableNeedDrain]: [Getter],
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                promises: [Getter],
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              IncomingMessage: <ref *177> [Function: IncomingMessage] {
                [length]: 1,
                [name]: 'IncomingMessage',
                [prototype]: Readable {
                  [constructor]: [Circular *177],
                  [connection]: [Getter/Setter],
                  [headers]: [Getter/Setter],
                  [headersDistinct]: [Getter/Setter],
                  [trailers]: [Getter/Setter],
                  [trailersDistinct]: [Getter/Setter],
                  setTimeout: <ref *178> [Function: setTimeout] {
                    [length]: 2,
                    [name]: 'setTimeout',
                    [prototype]: { [constructor]: [Circular *178] }
                  },
                  _read: <ref *179> [Function: _read] {
                    [length]: 1,
                    [name]: '_read',
                    [prototype]: { [constructor]: [Circular *179] }
                  },
                  _destroy: <ref *180> [Function: _destroy] {
                    [length]: 2,
                    [name]: '_destroy',
                    [prototype]: { [constructor]: [Circular *180] }
                  },
                  _addHeaderLines: <ref *181> [Function: _addHeaderLines] {
                    [length]: 2,
                    [name]: '_addHeaderLines',
                    [prototype]: { [constructor]: [Circular *181] }
                  },
                  _addHeaderLine: <ref *182> [Function: _addHeaderLine] {
                    [length]: 3,
                    [name]: '_addHeaderLine',
                    [prototype]: { [constructor]: [Circular *182] }
                  },
                  _addHeaderLineDistinct: <ref *183> [Function: _addHeaderLineDistinct] {
                    [length]: 3,
                    [name]: '_addHeaderLineDistinct',
                    [prototype]: { [constructor]: [Circular *183] }
                  },
                  _dump: <ref *184> [Function: _dump] {
                    [length]: 0,
                    [name]: '_dump',
                    [prototype]: { [constructor]: [Circular *184] }
                  },
                  [readable]: [Getter/Setter],
                  [readableDidRead]: [Getter],
                  [readableAborted]: [Getter],
                  [readableHighWaterMark]: [Getter],
                  [readableBuffer]: [Getter],
                  [readableFlowing]: [Getter/Setter],
                  [readableLength]: [Getter],
                  [readableObjectMode]: [Getter],
                  [readableEncoding]: [Getter],
                  [errored]: [Getter],
                  [closed]: [Getter],
                  [destroyed]: [Getter/Setter],
                  [readableEnded]: [Getter],
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                promises: [Getter],
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              OutgoingMessage: <ref *185> [Function: OutgoingMessage] {
                [length]: 1,
                [name]: 'OutgoingMessage',
                [prototype]: Stream {
                  [constructor]: [Circular *185],
                  [errored]: [Getter],
                  [closed]: [Getter],
                  [writableFinished]: [Getter],
                  [writableObjectMode]: [Getter],
                  [writableLength]: [Getter],
                  [writableHighWaterMark]: [Getter],
                  [writableCorked]: [Getter],
                  [_headers]: [Getter/Setter],
                  [connection]: [Getter/Setter],
                  [_headerNames]: [Getter/Setter],
                  _renderHeaders: <ref *186> [Function: _renderHeaders] {
                    [length]: 0,
                    [name]: '_renderHeaders',
                    [prototype]: { [constructor]: [Circular *186] }
                  },
                  cork: <ref *187> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *187] }
                  },
                  uncork: <ref *188> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *188] }
                  },
                  setTimeout: <ref *189> [Function: setTimeout] {
                    [length]: 2,
                    [name]: 'setTimeout',
                    [prototype]: { [constructor]: [Circular *189] }
                  },
                  destroy: <ref *190> [Function: destroy] {
                    [length]: 1,
                    [name]: 'destroy',
                    [prototype]: { [constructor]: [Circular *190] }
                  },
                  _send: <ref *191> [Function: _send] {
                    [length]: 4,
                    [name]: '_send',
                    [prototype]: { [constructor]: [Circular *191] }
                  },
                  _writeRaw: <ref *192> [Function: _writeRaw] {
                    [length]: 4,
                    [name]: '_writeRaw',
                    [prototype]: { [constructor]: [Circular *192] }
                  },
                  _storeHeader: <ref *193> [Function: _storeHeader] {
                    [length]: 2,
                    [name]: '_storeHeader',
                    [prototype]: { [constructor]: [Circular *193] }
                  },
                  setHeader: <ref *194> [Function: setHeader] {
                    [length]: 2,
                    [name]: 'setHeader',
                    [prototype]: { [constructor]: [Circular *194] }
                  },
                  setHeaders: <ref *195> [Function: setHeaders] {
                    [length]: 1,
                    [name]: 'setHeaders',
                    [prototype]: { [constructor]: [Circular *195] }
                  },
                  appendHeader: <ref *196> [Function: appendHeader] {
                    [length]: 2,
                    [name]: 'appendHeader',
                    [prototype]: { [constructor]: [Circular *196] }
                  },
                  getHeader: <ref *197> [Function: getHeader] {
                    [length]: 1,
                    [name]: 'getHeader',
                    [prototype]: { [constructor]: [Circular *197] }
                  },
                  getHeaderNames: <ref *198> [Function: getHeaderNames] {
                    [length]: 0,
                    [name]: 'getHeaderNames',
                    [prototype]: { [constructor]: [Circular *198] }
                  },
                  getRawHeaderNames: <ref *199> [Function: getRawHeaderNames] {
                    [length]: 0,
                    [name]: 'getRawHeaderNames',
                    [prototype]: { [constructor]: [Circular *199] }
                  },
                  getHeaders: <ref *200> [Function: getHeaders] {
                    [length]: 0,
                    [name]: 'getHeaders',
                    [prototype]: { [constructor]: [Circular *200] }
                  },
                  hasHeader: <ref *201> [Function: hasHeader] {
                    [length]: 1,
                    [name]: 'hasHeader',
                    [prototype]: { [constructor]: [Circular *201] }
                  },
                  removeHeader: <ref *202> [Function: removeHeader] {
                    [length]: 1,
                    [name]: 'removeHeader',
                    [prototype]: { [constructor]: [Circular *202] }
                  },
                  _implicitHeader: <ref *203> [Function: _implicitHeader] {
                    [length]: 0,
                    [name]: '_implicitHeader',
                    [prototype]: { [constructor]: [Circular *203] }
                  },
                  headersSent: [Getter],
                  [writableEnded]: [Getter],
                  [writableNeedDrain]: [Getter],
                  write: <ref *204> [Function: write] {
                    [length]: 3,
                    [name]: 'write',
                    [prototype]: { [constructor]: [Circular *204] }
                  },
                  addTrailers: <ref *205> [Function: addTrailers] {
                    [length]: 1,
                    [name]: 'addTrailers',
                    [prototype]: { [constructor]: [Circular *205] }
                  },
                  end: <ref *206> [Function: end] {
                    [length]: 3,
                    [name]: 'end',
                    [prototype]: { [constructor]: [Circular *206] }
                  },
                  _finish: <ref *207> [Function: _finish] {
                    [length]: 0,
                    [name]: '_finish',
                    [prototype]: { [constructor]: [Circular *207] }
                  },
                  _flush: <ref *208> [Function: _flush] {
                    [length]: 0,
                    [name]: '_flush',
                    [prototype]: { [constructor]: [Circular *208] }
                  },
                  _flushOutput: <ref *209> [Function: _flushOutput] {
                    [length]: 1,
                    [name]: '_flushOutput',
                    [prototype]: { [constructor]: [Circular *209] }
                  },
                  flushHeaders: <ref *210> [Function: flushHeaders] {
                    [length]: 0,
                    [name]: 'flushHeaders',
                    [prototype]: { [constructor]: [Circular *210] }
                  },
                  pipe: <ref *211> [Function: pipe] {
                    [length]: 0,
                    [name]: 'pipe',
                    [prototype]: { [constructor]: [Circular *211] }
                  },
                  [Symbol(nodejs.rejection)]: <ref *212> [Function (anonymous)] {
                    [length]: 2,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *212] }
                  },
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                promises: [Getter],
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              Server: <ref *213> [Function: Server] {
                [length]: 2,
                [name]: 'Server',
                [prototype]: Server {
                  [constructor]: [Circular *213],
                  close: <ref *214> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *214] }
                  },
                  closeAllConnections: <ref *215> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *215] }
                  },
                  closeIdleConnections: <ref *216> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *216] }
                  },
                  setTimeout: <ref *217> [Function: setTimeout] {
                    [length]: 2,
                    [name]: 'setTimeout',
                    [prototype]: { [constructor]: [Circular *217] }
                  },
                  [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                  },
                  [Symbol(nodejs.rejection)]: <ref *218> [Function (anonymous)] {
                    [length]: 2,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *218] }
                  },
                  listening: [Getter],
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              ServerResponse: <ref *219> [Function: ServerResponse] {
                [length]: 2,
                [name]: 'ServerResponse',
                [prototype]: OutgoingMessage {
                  [constructor]: [Circular *219],
                  _finish: <ref *220> [Function: _finish] {
                    [length]: 0,
                    [name]: '_finish',
                    [prototype]: { [constructor]: [Circular *220] }
                  },
                  statusCode: 200,
                  statusMessage: undefined,
                  assignSocket: <ref *221> [Function: assignSocket] {
                    [length]: 1,
                    [name]: 'assignSocket',
                    [prototype]: { [constructor]: [Circular *221] }
                  },
                  detachSocket: <ref *222> [Function: detachSocket] {
                    [length]: 1,
                    [name]: 'detachSocket',
                    [prototype]: { [constructor]: [Circular *222] }
                  },
                  writeContinue: <ref *223> [Function: writeContinue] {
                    [length]: 1,
                    [name]: 'writeContinue',
                    [prototype]: { [constructor]: [Circular *223] }
                  },
                  writeProcessing: <ref *224> [Function: writeProcessing] {
                    [length]: 1,
                    [name]: 'writeProcessing',
                    [prototype]: { [constructor]: [Circular *224] }
                  },
                  writeEarlyHints: <ref *225> [Function: writeEarlyHints] {
                    [length]: 2,
                    [name]: 'writeEarlyHints',
                    [prototype]: { [constructor]: [Circular *225] }
                  },
                  _implicitHeader: <ref *226> [Function: _implicitHeader] {
                    [length]: 0,
                    [name]: '_implicitHeader',
                    [prototype]: { [constructor]: [Circular *226] }
                  },
                  writeHead: <ref *227> [Function: writeHead] {
                    [length]: 3,
                    [name]: 'writeHead',
                    [prototype]: { [constructor]: [Circular *227] }
                  },
                  writeHeader: <ref *227> [Function: writeHead] {
                    [length]: 3,
                    [name]: 'writeHead',
                    [prototype]: { [constructor]: [Circular *227] }
                  },
                  [errored]: [Getter],
                  [closed]: [Getter],
                  [writableFinished]: [Getter],
                  [writableObjectMode]: [Getter],
                  [writableLength]: [Getter],
                  [writableHighWaterMark]: [Getter],
                  [writableCorked]: [Getter],
                  [_headers]: [Getter/Setter],
                  [connection]: [Getter/Setter],
                  [_headerNames]: [Getter/Setter],
                  headersSent: [Getter],
                  [writableEnded]: [Getter],
                  [writableNeedDrain]: [Getter],
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                promises: [Getter],
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              createServer: <ref *228> [Function: createServer] {
                [length]: 2,
                [name]: 'createServer',
                [prototype]: { [constructor]: [Circular *228] }
              },
              validateHeaderName: <ref *229> [Function: wrappedFn] {
                [length]: 0,
                [name]: 'wrappedFn',
                [prototype]: { [constructor]: [Circular *229] },
                withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
              },
              validateHeaderValue: <ref *230> [Function: wrappedFn] {
                [length]: 0,
                [name]: 'wrappedFn',
                [prototype]: { [constructor]: [Circular *230] },
                withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
              },
              get: <ref *231> [Function: get] {
                [length]: 3,
                [name]: 'get',
                [prototype]: { [constructor]: [Circular *231] }
              },
              request: <ref *232> [Function: request] {
                [length]: 3,
                [name]: 'request',
                [prototype]: { [constructor]: [Circular *232] }
              },
              setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers] {
                [length]: 1,
                [name]: 'setMaxIdleHTTPParsers'
              },
              maxHeaderSize: [Getter],
              globalAgent: [Getter/Setter]
            },
            'https:': {
              Agent: <ref *233> [Function: Agent] {
                [length]: 1,
                [name]: 'Agent',
                [prototype]: Agent {
                  [constructor]: [Circular *233],
                  createConnection: <ref *234> [Function: createConnection] {
                    [length]: 3,
                    [name]: 'createConnection',
                    [prototype]: { [constructor]: [Circular *234] }
                  },
                  getName: <ref *235> [Function: getName] {
                    [length]: 0,
                    [name]: 'getName',
                    [prototype]: { [constructor]: [Circular *235] }
                  },
                  _getSession: <ref *236> [Function: _getSession] {
                    [length]: 1,
                    [name]: '_getSession',
                    [prototype]: { [constructor]: [Circular *236] }
                  },
                  _cacheSession: <ref *237> [Function: _cacheSession] {
                    [length]: 2,
                    [name]: '_cacheSession',
                    [prototype]: { [constructor]: [Circular *237] }
                  },
                  _evictSession: <ref *238> [Function: _evictSession] {
                    [length]: 1,
                    [name]: '_evictSession',
                    [prototype]: { [constructor]: [Circular *238] }
                  },
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                defaultMaxSockets: Infinity,
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              globalAgent: <ref *245> Agent {
                _events: [Object: null prototype] {
                  free: [Function (anonymous)] { [length]: 2, [name]: '' },
                  newListener: <ref *239> [Function: maybeEnableKeylog] {
                    [length]: 1,
                    [name]: 'maybeEnableKeylog',
                    [prototype]: { [constructor]: [Circular *239] }
                  }
                },
                _eventsCount: 2,
                _maxListeners: undefined,
                defaultPort: 443,
                protocol: 'https:',
                options: [Object: null prototype] {
                  keepAlive: true,
                  scheduling: 'lifo',
                  timeout: 5000,
                  noDelay: true,
                  path: null
                },
                requests: [Object: null prototype] {},
                sockets: [Object: null prototype] {},
                freeSockets: [Object: null prototype] {
                  'speech.googleapis.com:443:::::::::::::::::::::': [ [Circular *147], [length]: 1 ]
                },
                keepAliveMsecs: 1000,
                keepAlive: true,
                maxSockets: Infinity,
                maxFreeSockets: 256,
                scheduling: 'lifo',
                maxTotalSockets: Infinity,
                totalSocketCount: 1,
                maxCachedSessions: 100,
                _sessionCache: {
                  map: {
                    'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
                  },
                  list: [
                    'speech.googleapis.com:443:::::::::::::::::::::',
                    [length]: 1
                  ]
                },
                [Symbol(shapeMode)]: false,
                [Symbol(kCapture)]: false
              },
              Server: <ref *240> [Function: Server] {
                [length]: 2,
                [name]: 'Server',
                [prototype]: Server {
                  [constructor]: [Circular *240],
                  closeAllConnections: <ref *215> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *215] }
                  },
                  closeIdleConnections: <ref *216> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *216] }
                  },
                  setTimeout: <ref *217> [Function: setTimeout] {
                    [length]: 2,
                    [name]: 'setTimeout',
                    [prototype]: { [constructor]: [Circular *217] }
                  },
                  close: <ref *241> [Function (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [prototype]: { [constructor]: [Circular *241] }
                  },
                  [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                    [length]: 0,
                    [name]: '',
                    [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                  },
                  listening: [Getter],
                  _events: undefined,
                  _eventsCount: 0,
                  _maxListeners: undefined,
                  [Symbol(kCapture)]: false
                },
                usingDomains: false,
                captureRejectionSymbol: Symbol(nodejs.rejection),
                captureRejections: [Getter/Setter],
                EventEmitterAsyncResource: [Getter],
                errorMonitor: Symbol(events.errorMonitor),
                defaultMaxListeners: [Getter/Setter],
                [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
                [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
              },
              createServer: <ref *242> [Function: createServer] {
                [length]: 2,
                [name]: 'createServer',
                [prototype]: { [constructor]: [Circular *242] }
              },
              get: <ref *243> [Function: get] {
                [length]: 3,
                [name]: 'get',
                [prototype]: { [constructor]: [Circular *243] }
              },
              request: <ref *244> [Function: request] {
                [length]: 0,
                [name]: 'request',
                [prototype]: { [constructor]: [Circular *244] }
              }
            }
          },
          pathname: '/v1/speech:recognize',
          search: '?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
          _defaultAgent: <ref *245> Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)] { [length]: 2, [name]: '' },
              newListener: <ref *239> [Function: maybeEnableKeylog] {
                [length]: 1,
                [name]: 'maybeEnableKeylog',
                [prototype]: { [constructor]: [Circular *239] }
              }
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {
              'speech.googleapis.com:443:::::::::::::::::::::': [ [Circular *147], [length]: 1 ]
            },
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 1,
            maxCachedSessions: 100,
            _sessionCache: {
              map: {
                'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
              },
              list: [
                'speech.googleapis.com:443:::::::::::::::::::::',
                [length]: 1
              ]
            },
            [Symbol(shapeMode)]: false,
            [Symbol(kCapture)]: false
          },
          host: 'speech.googleapis.com',
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          servername: 'speech.googleapis.com',
          _agentKey: 'speech.googleapis.com:443:::::::::::::::::::::',
          encoding: null,
          keepAliveInitialDelay: 1000
        },
        [_connecting]: [Getter],
        [pending]: [Getter],
        [readyState]: [Getter],
        [bufferSize]: [Getter],
        bytesRead: [Getter],
        remoteAddress: [Getter],
        remoteFamily: [Getter],
        remotePort: [Getter],
        localAddress: [Getter],
        localPort: [Getter],
        localFamily: [Getter],
        _bytesDispatched: [Getter],
        bytesWritten: [Getter],
        [_handle]: [Getter/Setter],
        [Symbol(kUpdateTimer)]: [Getter],
        [writable]: [Getter/Setter],
        [writableHighWaterMark]: [Getter],
        [writableObjectMode]: [Getter],
        [writableBuffer]: [Getter],
        [writableLength]: [Getter],
        [writableFinished]: [Getter],
        [writableCorked]: [Getter],
        [writableEnded]: [Getter],
        [writableNeedDrain]: [Getter],
        [destroyed]: [Getter/Setter]
      },
      _consuming: true,
      _dumped: false,
      req: [Circular *248],
      _eventsCount: 4,
      responseUrl: 'https://speech.googleapis.com/v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
      redirects: [ [length]: 0 ],
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [Symbol(kHeaders)]: {
        'content-type': 'application/json; charset=UTF-8',
        vary: 'Origin, X-Origin, Referer',
        date: 'Sun, 08 Sep 2024 20:53:19 GMT',
        server: 'ESF',
        'cache-control': 'private',
        'x-xss-protection': '0',
        'x-frame-options': 'SAMEORIGIN',
        'x-content-type-options': 'nosniff',
        'alt-svc': 'h3=":443"; ma=2592000,h3-29=":443"; ma=2592000',
        'transfer-encoding': 'chunked'
      },
      [Symbol(kHeadersCount)]: 26,
      [Symbol(kTrailers)]: null,
      [Symbol(kTrailersCount)]: 0,
      [connection]: [Getter/Setter],
      [headers]: [Getter/Setter],
      [headersDistinct]: [Getter/Setter],
      [trailers]: [Getter/Setter],
      [trailersDistinct]: [Getter/Setter],
      [readable]: [Getter/Setter],
      [readableDidRead]: [Getter],
      [readableAborted]: [Getter],
      [readableHighWaterMark]: [Getter],
      [readableBuffer]: [Getter],
      [readableFlowing]: [Getter/Setter],
      [readableLength]: [Getter],
      [readableObjectMode]: [Getter],
      [readableEncoding]: [Getter],
      [errored]: [Getter],
      [closed]: [Getter],
      [destroyed]: [Getter/Setter],
      [readableEnded]: [Getter]
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    reusedSocket: false,
    host: 'speech.googleapis.com',
    protocol: 'https:',
    _redirectable: Writable {
      _events: {
        close: undefined,
        error: <ref *249> [Function: handleRequestError] {
          [length]: 1,
          [name]: 'handleRequestError',
          [prototype]: { [constructor]: [Circular *249] }
        },
        prefinish: undefined,
        finish: undefined,
        drain: undefined,
        response: <ref *250> [Function: handleResponse] {
          [length]: 1,
          [name]: 'handleResponse',
          [prototype]: { [constructor]: [Circular *250] }
        },
        socket: <ref *251> [Function: handleRequestSocket] {
          [length]: 1,
          [name]: 'handleRequestSocket',
          [prototype]: { [constructor]: [Circular *251] }
        }
      },
      _writableState: WritableState {
        highWaterMark: 16384,
        length: 0,
        corked: 0,
        onwrite: [Function: bound onwrite] {
          [length]: 1,
          [name]: 'bound onwrite'
        },
        writelen: 0,
        bufferedIndex: 0,
        pendingcb: 0,
        [Symbol(kState)]: 17580812,
        [Symbol(kBufferedValue)]: null,
        [objectMode]: [Getter/Setter],
        [finalCalled]: [Getter/Setter],
        [needDrain]: [Getter/Setter],
        [ending]: [Getter/Setter],
        [ended]: [Getter/Setter],
        [finished]: [Getter/Setter],
        [destroyed]: [Getter/Setter],
        [decodeStrings]: [Getter/Setter],
        [writing]: [Getter/Setter],
        [sync]: [Getter/Setter],
        [bufferProcessing]: [Getter/Setter],
        [constructed]: [Getter/Setter],
        [prefinished]: [Getter/Setter],
        [errorEmitted]: [Getter/Setter],
        [emitClose]: [Getter/Setter],
        [autoDestroy]: [Getter/Setter],
        [closed]: [Getter/Setter],
        [closeEmitted]: [Getter/Setter],
        [allBuffers]: [Getter/Setter],
        [allNoop]: [Getter/Setter],
        [errored]: [Getter/Setter],
        [writable]: [Getter/Setter],
        [defaultEncoding]: [Getter/Setter],
        [writecb]: [Getter/Setter],
        [afterWriteTickInfo]: [Getter/Setter],
        [buffered]: [Getter/Setter],
        [bufferedRequestCount]: [Getter]
      },
      _maxListeners: undefined,
      _options: {
        maxRedirects: 21,
        maxBodyLength: Infinity,
        protocol: 'https:',
        path: '/v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
        method: 'POST',
        headers: [Object: null prototype] {
          Accept: 'application/json, text/plain, */*',
          'Content-Type': 'application/json',
          'User-Agent': 'axios/1.7.7',
          'Content-Length': '107708',
          'Accept-Encoding': 'gzip, compress, deflate, br'
        },
        agents: { http: undefined, https: undefined },
        auth: undefined,
        family: undefined,
        beforeRedirect: <ref *154> [Function: dispatchBeforeRedirect] {
          [length]: 2,
          [name]: 'dispatchBeforeRedirect',
          [prototype]: { [constructor]: [Circular *154] }
        },
        beforeRedirects: {
          proxy: <ref *155> [Function: beforeRedirect] {
            [length]: 1,
            [name]: 'beforeRedirect',
            [prototype]: { [constructor]: [Circular *155] }
          }
        },
        hostname: 'speech.googleapis.com',
        port: '',
        agent: undefined,
        nativeProtocols: <ref *252> {
          'http:': {
            _connectionListener: <ref *156> [Function: connectionListener] {
              [length]: 1,
              [name]: 'connectionListener',
              [prototype]: { [constructor]: [Circular *156] }
            },
            METHODS: [
              'ACL',         'BIND',       'CHECKOUT',
              'CONNECT',     'COPY',       'DELETE',
              'GET',         'HEAD',       'LINK',
              'LOCK',        'M-SEARCH',   'MERGE',
              'MKACTIVITY',  'MKCALENDAR', 'MKCOL',
              'MOVE',        'NOTIFY',     'OPTIONS',
              'PATCH',       'POST',       'PROPFIND',
              'PROPPATCH',   'PURGE',      'PUT',
              'REBIND',      'REPORT',     'SEARCH',
              'SOURCE',      'SUBSCRIBE',  'TRACE',
              'UNBIND',      'UNLINK',     'UNLOCK',
              'UNSUBSCRIBE', [length]: 34
            ],
            STATUS_CODES: {
              '100': 'Continue',
              '101': 'Switching Protocols',
              '102': 'Processing',
              '103': 'Early Hints',
              '200': 'OK',
              '201': 'Created',
              '202': 'Accepted',
              '203': 'Non-Authoritative Information',
              '204': 'No Content',
              '205': 'Reset Content',
              '206': 'Partial Content',
              '207': 'Multi-Status',
              '208': 'Already Reported',
              '226': 'IM Used',
              '300': 'Multiple Choices',
              '301': 'Moved Permanently',
              '302': 'Found',
              '303': 'See Other',
              '304': 'Not Modified',
              '305': 'Use Proxy',
              '307': 'Temporary Redirect',
              '308': 'Permanent Redirect',
              '400': 'Bad Request',
              '401': 'Unauthorized',
              '402': 'Payment Required',
              '403': 'Forbidden',
              '404': 'Not Found',
              '405': 'Method Not Allowed',
              '406': 'Not Acceptable',
              '407': 'Proxy Authentication Required',
              '408': 'Request Timeout',
              '409': 'Conflict',
              '410': 'Gone',
              '411': 'Length Required',
              '412': 'Precondition Failed',
              '413': 'Payload Too Large',
              '414': 'URI Too Long',
              '415': 'Unsupported Media Type',
              '416': 'Range Not Satisfiable',
              '417': 'Expectation Failed',
              '418': "I'm a Teapot",
              '421': 'Misdirected Request',
              '422': 'Unprocessable Entity',
              '423': 'Locked',
              '424': 'Failed Dependency',
              '425': 'Too Early',
              '426': 'Upgrade Required',
              '428': 'Precondition Required',
              '429': 'Too Many Requests',
              '431': 'Request Header Fields Too Large',
              '451': 'Unavailable For Legal Reasons',
              '500': 'Internal Server Error',
              '501': 'Not Implemented',
              '502': 'Bad Gateway',
              '503': 'Service Unavailable',
              '504': 'Gateway Timeout',
              '505': 'HTTP Version Not Supported',
              '506': 'Variant Also Negotiates',
              '507': 'Insufficient Storage',
              '508': 'Loop Detected',
              '509': 'Bandwidth Limit Exceeded',
              '510': 'Not Extended',
              '511': 'Network Authentication Required'
            },
            Agent: <ref *157> [Function: Agent] {
              [length]: 1,
              [name]: 'Agent',
              [prototype]: EventEmitter {
                [constructor]: [Circular *157],
                createConnection: <ref *158> [Function: connect] {
                  [length]: 0,
                  [name]: 'connect',
                  [prototype]: { [constructor]: [Circular *158] }
                },
                getName: <ref *159> [Function: getName] {
                  [length]: 0,
                  [name]: 'getName',
                  [prototype]: { [constructor]: [Circular *159] }
                },
                addRequest: <ref *160> [Function: addRequest] {
                  [length]: 4,
                  [name]: 'addRequest',
                  [prototype]: { [constructor]: [Circular *160] }
                },
                createSocket: <ref *161> [Function: createSocket] {
                  [length]: 3,
                  [name]: 'createSocket',
                  [prototype]: { [constructor]: [Circular *161] }
                },
                removeSocket: <ref *162> [Function: removeSocket] {
                  [length]: 2,
                  [name]: 'removeSocket',
                  [prototype]: { [constructor]: [Circular *162] }
                },
                keepSocketAlive: <ref *163> [Function: keepSocketAlive] {
                  [length]: 1,
                  [name]: 'keepSocketAlive',
                  [prototype]: { [constructor]: [Circular *163] }
                },
                reuseSocket: <ref *164> [Function: reuseSocket] {
                  [length]: 2,
                  [name]: 'reuseSocket',
                  [prototype]: { [constructor]: [Circular *164] }
                },
                destroy: <ref *165> [Function: destroy] {
                  [length]: 0,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *165] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              defaultMaxSockets: Infinity,
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            ClientRequest: <ref *166> [Function: ClientRequest] {
              [length]: 3,
              [name]: 'ClientRequest',
              [prototype]: OutgoingMessage {
                [constructor]: [Circular *166],
                _finish: <ref *167> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *167] }
                },
                _implicitHeader: <ref *168> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *168] }
                },
                abort: <ref *169> [Function: abort] {
                  [length]: 0,
                  [name]: 'abort',
                  [prototype]: { [constructor]: [Circular *169] }
                },
                destroy: <ref *170> [Function: destroy] {
                  [length]: 1,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *170] }
                },
                onSocket: <ref *171> [Function: onSocket] {
                  [length]: 2,
                  [name]: 'onSocket',
                  [prototype]: { [constructor]: [Circular *171] }
                },
                _deferToConnect: <ref *172> [Function: _deferToConnect] {
                  [length]: 2,
                  [name]: '_deferToConnect',
                  [prototype]: { [constructor]: [Circular *172] }
                },
                setTimeout: <ref *173> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *173] }
                },
                setNoDelay: <ref *174> [Function: setNoDelay] {
                  [length]: 1,
                  [name]: 'setNoDelay',
                  [prototype]: { [constructor]: [Circular *174] }
                },
                setSocketKeepAlive: <ref *175> [Function: setSocketKeepAlive] {
                  [length]: 2,
                  [name]: 'setSocketKeepAlive',
                  [prototype]: { [constructor]: [Circular *175] }
                },
                clearTimeout: <ref *176> [Function: clearTimeout] {
                  [length]: 1,
                  [name]: 'clearTimeout',
                  [prototype]: { [constructor]: [Circular *176] }
                },
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            IncomingMessage: <ref *177> [Function: IncomingMessage] {
              [length]: 1,
              [name]: 'IncomingMessage',
              [prototype]: Readable {
                [constructor]: [Circular *177],
                [connection]: [Getter/Setter],
                [headers]: [Getter/Setter],
                [headersDistinct]: [Getter/Setter],
                [trailers]: [Getter/Setter],
                [trailersDistinct]: [Getter/Setter],
                setTimeout: <ref *178> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *178] }
                },
                _read: <ref *179> [Function: _read] {
                  [length]: 1,
                  [name]: '_read',
                  [prototype]: { [constructor]: [Circular *179] }
                },
                _destroy: <ref *180> [Function: _destroy] {
                  [length]: 2,
                  [name]: '_destroy',
                  [prototype]: { [constructor]: [Circular *180] }
                },
                _addHeaderLines: <ref *181> [Function: _addHeaderLines] {
                  [length]: 2,
                  [name]: '_addHeaderLines',
                  [prototype]: { [constructor]: [Circular *181] }
                },
                _addHeaderLine: <ref *182> [Function: _addHeaderLine] {
                  [length]: 3,
                  [name]: '_addHeaderLine',
                  [prototype]: { [constructor]: [Circular *182] }
                },
                _addHeaderLineDistinct: <ref *183> [Function: _addHeaderLineDistinct] {
                  [length]: 3,
                  [name]: '_addHeaderLineDistinct',
                  [prototype]: { [constructor]: [Circular *183] }
                },
                _dump: <ref *184> [Function: _dump] {
                  [length]: 0,
                  [name]: '_dump',
                  [prototype]: { [constructor]: [Circular *184] }
                },
                [readable]: [Getter/Setter],
                [readableDidRead]: [Getter],
                [readableAborted]: [Getter],
                [readableHighWaterMark]: [Getter],
                [readableBuffer]: [Getter],
                [readableFlowing]: [Getter/Setter],
                [readableLength]: [Getter],
                [readableObjectMode]: [Getter],
                [readableEncoding]: [Getter],
                [errored]: [Getter],
                [closed]: [Getter],
                [destroyed]: [Getter/Setter],
                [readableEnded]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            OutgoingMessage: <ref *185> [Function: OutgoingMessage] {
              [length]: 1,
              [name]: 'OutgoingMessage',
              [prototype]: Stream {
                [constructor]: [Circular *185],
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                _renderHeaders: <ref *186> [Function: _renderHeaders] {
                  [length]: 0,
                  [name]: '_renderHeaders',
                  [prototype]: { [constructor]: [Circular *186] }
                },
                cork: <ref *187> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *187] }
                },
                uncork: <ref *188> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *188] }
                },
                setTimeout: <ref *189> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *189] }
                },
                destroy: <ref *190> [Function: destroy] {
                  [length]: 1,
                  [name]: 'destroy',
                  [prototype]: { [constructor]: [Circular *190] }
                },
                _send: <ref *191> [Function: _send] {
                  [length]: 4,
                  [name]: '_send',
                  [prototype]: { [constructor]: [Circular *191] }
                },
                _writeRaw: <ref *192> [Function: _writeRaw] {
                  [length]: 4,
                  [name]: '_writeRaw',
                  [prototype]: { [constructor]: [Circular *192] }
                },
                _storeHeader: <ref *193> [Function: _storeHeader] {
                  [length]: 2,
                  [name]: '_storeHeader',
                  [prototype]: { [constructor]: [Circular *193] }
                },
                setHeader: <ref *194> [Function: setHeader] {
                  [length]: 2,
                  [name]: 'setHeader',
                  [prototype]: { [constructor]: [Circular *194] }
                },
                setHeaders: <ref *195> [Function: setHeaders] {
                  [length]: 1,
                  [name]: 'setHeaders',
                  [prototype]: { [constructor]: [Circular *195] }
                },
                appendHeader: <ref *196> [Function: appendHeader] {
                  [length]: 2,
                  [name]: 'appendHeader',
                  [prototype]: { [constructor]: [Circular *196] }
                },
                getHeader: <ref *197> [Function: getHeader] {
                  [length]: 1,
                  [name]: 'getHeader',
                  [prototype]: { [constructor]: [Circular *197] }
                },
                getHeaderNames: <ref *198> [Function: getHeaderNames] {
                  [length]: 0,
                  [name]: 'getHeaderNames',
                  [prototype]: { [constructor]: [Circular *198] }
                },
                getRawHeaderNames: <ref *199> [Function: getRawHeaderNames] {
                  [length]: 0,
                  [name]: 'getRawHeaderNames',
                  [prototype]: { [constructor]: [Circular *199] }
                },
                getHeaders: <ref *200> [Function: getHeaders] {
                  [length]: 0,
                  [name]: 'getHeaders',
                  [prototype]: { [constructor]: [Circular *200] }
                },
                hasHeader: <ref *201> [Function: hasHeader] {
                  [length]: 1,
                  [name]: 'hasHeader',
                  [prototype]: { [constructor]: [Circular *201] }
                },
                removeHeader: <ref *202> [Function: removeHeader] {
                  [length]: 1,
                  [name]: 'removeHeader',
                  [prototype]: { [constructor]: [Circular *202] }
                },
                _implicitHeader: <ref *203> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *203] }
                },
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                write: <ref *204> [Function: write] {
                  [length]: 3,
                  [name]: 'write',
                  [prototype]: { [constructor]: [Circular *204] }
                },
                addTrailers: <ref *205> [Function: addTrailers] {
                  [length]: 1,
                  [name]: 'addTrailers',
                  [prototype]: { [constructor]: [Circular *205] }
                },
                end: <ref *206> [Function: end] {
                  [length]: 3,
                  [name]: 'end',
                  [prototype]: { [constructor]: [Circular *206] }
                },
                _finish: <ref *207> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *207] }
                },
                _flush: <ref *208> [Function: _flush] {
                  [length]: 0,
                  [name]: '_flush',
                  [prototype]: { [constructor]: [Circular *208] }
                },
                _flushOutput: <ref *209> [Function: _flushOutput] {
                  [length]: 1,
                  [name]: '_flushOutput',
                  [prototype]: { [constructor]: [Circular *209] }
                },
                flushHeaders: <ref *210> [Function: flushHeaders] {
                  [length]: 0,
                  [name]: 'flushHeaders',
                  [prototype]: { [constructor]: [Circular *210] }
                },
                pipe: <ref *211> [Function: pipe] {
                  [length]: 0,
                  [name]: 'pipe',
                  [prototype]: { [constructor]: [Circular *211] }
                },
                [Symbol(nodejs.rejection)]: <ref *212> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *212] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            Server: <ref *213> [Function: Server] {
              [length]: 2,
              [name]: 'Server',
              [prototype]: Server {
                [constructor]: [Circular *213],
                close: <ref *214> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *214] }
                },
                closeAllConnections: <ref *215> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *215] }
                },
                closeIdleConnections: <ref *216> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *216] }
                },
                setTimeout: <ref *217> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *217] }
                },
                [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                },
                [Symbol(nodejs.rejection)]: <ref *218> [Function (anonymous)] {
                  [length]: 2,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *218] }
                },
                listening: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            ServerResponse: <ref *219> [Function: ServerResponse] {
              [length]: 2,
              [name]: 'ServerResponse',
              [prototype]: OutgoingMessage {
                [constructor]: [Circular *219],
                _finish: <ref *220> [Function: _finish] {
                  [length]: 0,
                  [name]: '_finish',
                  [prototype]: { [constructor]: [Circular *220] }
                },
                statusCode: 200,
                statusMessage: undefined,
                assignSocket: <ref *221> [Function: assignSocket] {
                  [length]: 1,
                  [name]: 'assignSocket',
                  [prototype]: { [constructor]: [Circular *221] }
                },
                detachSocket: <ref *222> [Function: detachSocket] {
                  [length]: 1,
                  [name]: 'detachSocket',
                  [prototype]: { [constructor]: [Circular *222] }
                },
                writeContinue: <ref *223> [Function: writeContinue] {
                  [length]: 1,
                  [name]: 'writeContinue',
                  [prototype]: { [constructor]: [Circular *223] }
                },
                writeProcessing: <ref *224> [Function: writeProcessing] {
                  [length]: 1,
                  [name]: 'writeProcessing',
                  [prototype]: { [constructor]: [Circular *224] }
                },
                writeEarlyHints: <ref *225> [Function: writeEarlyHints] {
                  [length]: 2,
                  [name]: 'writeEarlyHints',
                  [prototype]: { [constructor]: [Circular *225] }
                },
                _implicitHeader: <ref *226> [Function: _implicitHeader] {
                  [length]: 0,
                  [name]: '_implicitHeader',
                  [prototype]: { [constructor]: [Circular *226] }
                },
                writeHead: <ref *227> [Function: writeHead] {
                  [length]: 3,
                  [name]: 'writeHead',
                  [prototype]: { [constructor]: [Circular *227] }
                },
                writeHeader: <ref *227> [Function: writeHead] {
                  [length]: 3,
                  [name]: 'writeHead',
                  [prototype]: { [constructor]: [Circular *227] }
                },
                [errored]: [Getter],
                [closed]: [Getter],
                [writableFinished]: [Getter],
                [writableObjectMode]: [Getter],
                [writableLength]: [Getter],
                [writableHighWaterMark]: [Getter],
                [writableCorked]: [Getter],
                [_headers]: [Getter/Setter],
                [connection]: [Getter/Setter],
                [_headerNames]: [Getter/Setter],
                headersSent: [Getter],
                [writableEnded]: [Getter],
                [writableNeedDrain]: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              promises: [Getter],
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            createServer: <ref *228> [Function: createServer] {
              [length]: 2,
              [name]: 'createServer',
              [prototype]: { [constructor]: [Circular *228] }
            },
            validateHeaderName: <ref *229> [Function: wrappedFn] {
              [length]: 0,
              [name]: 'wrappedFn',
              [prototype]: { [constructor]: [Circular *229] },
              withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
            },
            validateHeaderValue: <ref *230> [Function: wrappedFn] {
              [length]: 0,
              [name]: 'wrappedFn',
              [prototype]: { [constructor]: [Circular *230] },
              withoutStackTrace: [Function (anonymous)] { [length]: 2, [name]: '' }
            },
            get: <ref *231> [Function: get] {
              [length]: 3,
              [name]: 'get',
              [prototype]: { [constructor]: [Circular *231] }
            },
            request: <ref *232> [Function: request] {
              [length]: 3,
              [name]: 'request',
              [prototype]: { [constructor]: [Circular *232] }
            },
            setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers] {
              [length]: 1,
              [name]: 'setMaxIdleHTTPParsers'
            },
            maxHeaderSize: [Getter],
            globalAgent: [Getter/Setter]
          },
          'https:': {
            Agent: <ref *233> [Function: Agent] {
              [length]: 1,
              [name]: 'Agent',
              [prototype]: Agent {
                [constructor]: [Circular *233],
                createConnection: <ref *234> [Function: createConnection] {
                  [length]: 3,
                  [name]: 'createConnection',
                  [prototype]: { [constructor]: [Circular *234] }
                },
                getName: <ref *235> [Function: getName] {
                  [length]: 0,
                  [name]: 'getName',
                  [prototype]: { [constructor]: [Circular *235] }
                },
                _getSession: <ref *236> [Function: _getSession] {
                  [length]: 1,
                  [name]: '_getSession',
                  [prototype]: { [constructor]: [Circular *236] }
                },
                _cacheSession: <ref *237> [Function: _cacheSession] {
                  [length]: 2,
                  [name]: '_cacheSession',
                  [prototype]: { [constructor]: [Circular *237] }
                },
                _evictSession: <ref *238> [Function: _evictSession] {
                  [length]: 1,
                  [name]: '_evictSession',
                  [prototype]: { [constructor]: [Circular *238] }
                },
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              defaultMaxSockets: Infinity,
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            globalAgent: <ref *245> Agent {
              _events: [Object: null prototype] {
                free: [Function (anonymous)] { [length]: 2, [name]: '' },
                newListener: <ref *239> [Function: maybeEnableKeylog] {
                  [length]: 1,
                  [name]: 'maybeEnableKeylog',
                  [prototype]: { [constructor]: [Circular *239] }
                }
              },
              _eventsCount: 2,
              _maxListeners: undefined,
              defaultPort: 443,
              protocol: 'https:',
              options: [Object: null prototype] {
                keepAlive: true,
                scheduling: 'lifo',
                timeout: 5000,
                noDelay: true,
                path: null
              },
              requests: [Object: null prototype] {},
              sockets: [Object: null prototype] {},
              freeSockets: [Object: null prototype] {
                'speech.googleapis.com:443:::::::::::::::::::::': [
                  <ref *147> TLSSocket {
                    _tlsOptions: {
                      allowHalfOpen: undefined,
                      pipe: false,
                      secureContext: SecureContext {
                        context: SecureContext { _external: [Getter] }
                      },
                      isServer: false,
                      requestCert: true,
                      rejectUnauthorized: true,
                      session: undefined,
                      ALPNProtocols: undefined,
                      requestOCSP: undefined,
                      enableTrace: undefined,
                      pskCallback: undefined,
                      highWaterMark: undefined,
                      onread: undefined,
                      signal: undefined
                    },
                    _secureEstablished: true,
                    _securePending: false,
                    _newSessionPending: false,
                    _controlReleased: true,
                    secureConnecting: false,
                    _SNICallback: null,
                    servername: 'speech.googleapis.com',
                    alpnProtocol: false,
                    authorized: true,
                    authorizationError: null,
                    encrypted: true,
                    _events: [Object: null prototype] {
                      close: [
                        <ref *138> [Function: onSocketCloseDestroySSL] {
                          [length]: 0,
                          [name]: 'onSocketCloseDestroySSL',
                          [prototype]: { [constructor]: [Circular *138] }
                        },
                        [Function: bound onceWrapper] {
                          [length]: 0,
                          [name]: 'bound onceWrapper',
                          listener: [Function (anonymous)] {
                            [length]: 1,
                            [name]: ''
                          }
                        },
                        <ref *139> [Function: onClose] {
                          [length]: 1,
                          [name]: 'onClose',
                          [prototype]: { [constructor]: [Circular *139] }
                        },
                        [length]: 3
                      ],
                      end: <ref *140> [Function: onReadableStreamEnd] {
                        [length]: 0,
                        [name]: 'onReadableStreamEnd',
                        [prototype]: { [constructor]: [Circular *140] }
                      },
                      error: [Function: bound onceWrapper] {
                        [length]: 0,
                        [name]: 'bound onceWrapper',
                        listener: <ref *141> [Function: freeSocketErrorListener] {
                          [length]: 1,
                          [name]: 'freeSocketErrorListener',
                          [prototype]: { [constructor]: [Circular *141] }
                        }
                      },
                      newListener: <ref *142> [Function: keylogNewListener] {
                        [length]: 1,
                        [name]: 'keylogNewListener',
                        [prototype]: { [constructor]: [Circular *142] }
                      },
                      connect: undefined,
                      secure: <ref *143> [Function: onConnectSecure] {
                        [length]: 0,
                        [name]: 'onConnectSecure',
                        [prototype]: { [constructor]: [Circular *143] }
                      },
                      session: [Function (anonymous)] { [length]: 1, [name]: '' },
                      free: <ref *144> [Function: onFree] {
                        [length]: 0,
                        [name]: 'onFree',
                        [prototype]: { [constructor]: [Circular *144] }
                      },
                      timeout: <ref *145> [Function: onTimeout] {
                        [length]: 0,
                        [name]: 'onTimeout',
                        [prototype]: { [constructor]: [Circular *145] }
                      },
                      agentRemove: <ref *146> [Function: onRemove] {
                        [length]: 0,
                        [name]: 'onRemove',
                        [prototype]: { [constructor]: [Circular *146] }
                      },
                      data: undefined,
                      drain: undefined
                    },
                    _eventsCount: 9,
                    connecting: false,
                    _hadError: false,
                    _parent: null,
                    _host: 'speech.googleapis.com',
                    _closeAfterHandlingError: false,
                    _readableState: ReadableState {
                      highWaterMark: 16384,
                      buffer: [ [length]: 0 ],
                      bufferIndex: 0,
                      length: 0,
                      pipes: [ [length]: 0 ],
                      awaitDrainWriters: null,
                      [Symbol(kState)]: 60303620,
                      [objectMode]: [Getter/Setter],
                      [ended]: [Getter/Setter],
                      [endEmitted]: [Getter/Setter],
                      [reading]: [Getter/Setter],
                      [constructed]: [Getter/Setter],
                      [sync]: [Getter/Setter],
                      [needReadable]: [Getter/Setter],
                      [emittedReadable]: [Getter/Setter],
                      [readableListening]: [Getter/Setter],
                      [resumeScheduled]: [Getter/Setter],
                      [errorEmitted]: [Getter/Setter],
                      [emitClose]: [Getter/Setter],
                      [autoDestroy]: [Getter/Setter],
                      [destroyed]: [Getter/Setter],
                      [closed]: [Getter/Setter],
                      [closeEmitted]: [Getter/Setter],
                      [multiAwaitDrain]: [Getter/Setter],
                      [readingMore]: [Getter/Setter],
                      [dataEmitted]: [Getter/Setter],
                      [errored]: [Getter/Setter],
                      [defaultEncoding]: [Getter/Setter],
                      [decoder]: [Getter/Setter],
                      [encoding]: [Getter/Setter],
                      [flowing]: [Getter/Setter],
                      [pipesCount]: [Getter],
                      [paused]: [Getter/Setter]
                    },
                    _writableState: WritableState {
                      highWaterMark: 16384,
                      length: 0,
                      corked: 0,
                      onwrite: [Function: bound onwrite] {
                        [length]: 1,
                        [name]: 'bound onwrite'
                      },
                      writelen: 0,
                      bufferedIndex: 0,
                      pendingcb: 0,
                      [Symbol(kState)]: 17563908,
                      [Symbol(kBufferedValue)]: null,
                      [Symbol(kWriteCbValue)]: [Function (anonymous)] { [length]: 1, [name]: '' },
                      [objectMode]: [Getter/Setter],
                      [finalCalled]: [Getter/Setter],
                      [needDrain]: [Getter/Setter],
                      [ending]: [Getter/Setter],
                      [ended]: [Getter/Setter],
                      [finished]: [Getter/Setter],
                      [destroyed]: [Getter/Setter],
                      [decodeStrings]: [Getter/Setter],
                      [writing]: [Getter/Setter],
                      [sync]: [Getter/Setter],
                      [bufferProcessing]: [Getter/Setter],
                      [constructed]: [Getter/Setter],
                      [prefinished]: [Getter/Setter],
                      [errorEmitted]: [Getter/Setter],
                      [emitClose]: [Getter/Setter],
                      [autoDestroy]: [Getter/Setter],
                      [closed]: [Getter/Setter],
                      [closeEmitted]: [Getter/Setter],
                      [allBuffers]: [Getter/Setter],
                      [allNoop]: [Getter/Setter],
                      [errored]: [Getter/Setter],
                      [writable]: [Getter/Setter],
                      [defaultEncoding]: [Getter/Setter],
                      [writecb]: [Getter/Setter],
                      [afterWriteTickInfo]: [Getter/Setter],
                      [buffered]: [Getter/Setter],
                      [bufferedRequestCount]: [Getter]
                    },
                    allowHalfOpen: false,
                    _maxListeners: undefined,
                    _sockname: null,
                    _pendingData: null,
                    _pendingEncoding: '',
                    server: undefined,
                    _server: null,
                    ssl: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *147],
                        [owner]: [Getter/Setter],
                        writeQueueSize: [Getter],
                        [fd]: [Getter],
                        [_externalStream]: [Getter],
                        [bytesRead]: [Getter],
                        [bytesWritten]: [Getter],
                        isStreamBase: true
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext {
                        context: SecureContext { _external: [Getter] }
                      },
                      reading: true,
                      onkeylog: <ref *148> [Function: onkeylog] {
                        [length]: 1,
                        [name]: 'onkeylog',
                        [prototype]: { [constructor]: [Circular *148] }
                      },
                      onhandshakestart: <ref *149> {
                        [length]: 0,
                        [name]: '',
                        [arguments]: [Getter/Setter],
                        [caller]: [Getter/Setter],
                        [constructor]: [Function: Function] {
                          [length]: 1,
                          [name]: 'Function',
                          [prototype]: [Circular *149]
                        },
                        [apply]: [Function: apply] {
                          [length]: 2,
                          [name]: 'apply'
                        },
                        [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                        [call]: [Function: call] { [length]: 1, [name]: 'call' },
                        [toString]: [Function: toString] {
                          [length]: 0,
                          [name]: 'toString'
                        },
                        [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                          [length]: 1,
                          [name]: '[Symbol.hasInstance]'
                        }
                      },
                      onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
                      onocspresponse: <ref *150> [Function: onocspresponse] {
                        [length]: 1,
                        [name]: 'onocspresponse',
                        [prototype]: { [constructor]: [Circular *150] }
                      },
                      onnewsession: <ref *151> [Function: onnewsessionclient] {
                        [length]: 2,
                        [name]: 'onnewsessionclient',
                        [prototype]: { [constructor]: [Circular *151] }
                      },
                      onerror: <ref *152> [Function: onerror] {
                        [length]: 1,
                        [name]: 'onerror',
                        [prototype]: { [constructor]: [Circular *152] }
                      },
                      [Symbol(owner_symbol)]: [Circular *147],
                      writeQueueSize: [Getter],
                      [fd]: [Getter],
                      [_externalStream]: [Getter],
                      [bytesRead]: [Getter],
                      [bytesWritten]: [Getter],
                      isStreamBase: true
                    },
                    _requestCert: true,
                    _rejectUnauthorized: true,
                    timeout: 5000,
                    parser: null,
                    _httpMessage: null,
                    autoSelectFamilyAttemptedAddresses: [ '142.250.194.138:443', [length]: 1 ],
                    [Symbol(alpncallback)]: null,
                    [Symbol(res)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *147],
                        [owner]: [Getter/Setter],
                        writeQueueSize: [Getter],
                        [fd]: [Getter],
                        [_externalStream]: [Getter],
                        [bytesRead]: [Getter],
                        [bytesWritten]: [Getter],
                        isStreamBase: true
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext {
                        context: SecureContext { _external: [Getter] }
                      },
                      reading: true,
                      onkeylog: <ref *148> [Function: onkeylog] {
                        [length]: 1,
                        [name]: 'onkeylog',
                        [prototype]: { [constructor]: [Circular *148] }
                      },
                      onhandshakestart: <ref *149> {
                        [length]: 0,
                        [name]: '',
                        [arguments]: [Getter/Setter],
                        [caller]: [Getter/Setter],
                        [constructor]: [Function: Function] {
                          [length]: 1,
                          [name]: 'Function',
                          [prototype]: [Circular *149]
                        },
                        [apply]: [Function: apply] {
                          [length]: 2,
                          [name]: 'apply'
                        },
                        [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                        [call]: [Function: call] { [length]: 1, [name]: 'call' },
                        [toString]: [Function: toString] {
                          [length]: 0,
                          [name]: 'toString'
                        },
                        [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                          [length]: 1,
                          [name]: '[Symbol.hasInstance]'
                        }
                      },
                      onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
                      onocspresponse: <ref *150> [Function: onocspresponse] {
                        [length]: 1,
                        [name]: 'onocspresponse',
                        [prototype]: { [constructor]: [Circular *150] }
                      },
                      onnewsession: <ref *151> [Function: onnewsessionclient] {
                        [length]: 2,
                        [name]: 'onnewsessionclient',
                        [prototype]: { [constructor]: [Circular *151] }
                      },
                      onerror: <ref *152> [Function: onerror] {
                        [length]: 1,
                        [name]: 'onerror',
                        [prototype]: { [constructor]: [Circular *152] }
                      },
                      [Symbol(owner_symbol)]: [Circular *147],
                      writeQueueSize: [Getter],
                      [fd]: [Getter],
                      [_externalStream]: [Getter],
                      [bytesRead]: [Getter],
                      [bytesWritten]: [Getter],
                      isStreamBase: true
                    },
                    [Symbol(verified)]: true,
                    [Symbol(pendingSession)]: null,
                    [Symbol(async_id_symbol)]: -1,
                    [Symbol(kHandle)]: TLSWrap {
                      _parent: TCP {
                        reading: [Getter/Setter],
                        onconnection: null,
                        [Symbol(owner_symbol)]: [Circular *147],
                        [owner]: [Getter/Setter],
                        writeQueueSize: [Getter],
                        [fd]: [Getter],
                        [_externalStream]: [Getter],
                        [bytesRead]: [Getter],
                        [bytesWritten]: [Getter],
                        isStreamBase: true
                      },
                      _parentWrap: null,
                      _secureContext: SecureContext {
                        context: SecureContext { _external: [Getter] }
                      },
                      reading: true,
                      onkeylog: <ref *148> [Function: onkeylog] {
                        [length]: 1,
                        [name]: 'onkeylog',
                        [prototype]: { [constructor]: [Circular *148] }
                      },
                      onhandshakestart: <ref *149> {
                        [length]: 0,
                        [name]: '',
                        [arguments]: [Getter/Setter],
                        [caller]: [Getter/Setter],
                        [constructor]: [Function: Function] {
                          [length]: 1,
                          [name]: 'Function',
                          [prototype]: [Circular *149]
                        },
                        [apply]: [Function: apply] {
                          [length]: 2,
                          [name]: 'apply'
                        },
                        [bind]: [Function: bind] { [length]: 1, [name]: 'bind' },
                        [call]: [Function: call] { [length]: 1, [name]: 'call' },
                        [toString]: [Function: toString] {
                          [length]: 0,
                          [name]: 'toString'
                        },
                        [Symbol(Symbol.hasInstance)]: [Function: [Symbol.hasInstance]] {
                          [length]: 1,
                          [name]: '[Symbol.hasInstance]'
                        }
                      },
                      onhandshakedone: [Function (anonymous)] { [length]: 0, [name]: '' },
                      onocspresponse: <ref *150> [Function: onocspresponse] {
                        [length]: 1,
                        [name]: 'onocspresponse',
                        [prototype]: { [constructor]: [Circular *150] }
                      },
                      onnewsession: <ref *151> [Function: onnewsessionclient] {
                        [length]: 2,
                        [name]: 'onnewsessionclient',
                        [prototype]: { [constructor]: [Circular *151] }
                      },
                      onerror: <ref *152> [Function: onerror] {
                        [length]: 1,
                        [name]: 'onerror',
                        [prototype]: { [constructor]: [Circular *152] }
                      },
                      [Symbol(owner_symbol)]: [Circular *147],
                      writeQueueSize: [Getter],
                      [fd]: [Getter],
                      [_externalStream]: [Getter],
                      [bytesRead]: [Getter],
                      [bytesWritten]: [Getter],
                      isStreamBase: true
                    },
                    [Symbol(lastWriteQueueSize)]: 0,
                    [Symbol(timeout)]: Timeout {
                      _idleTimeout: 5000,
                      _idlePrev: [TimersList],
                      _idleNext: [Timeout],
                      _idleStart: 4946,
                      _onTimeout: [Function],
                      _timerArgs: undefined,
                      _repeat: null,
                      _destroyed: false,
                      [Symbol(refed)]: false,
                      [Symbol(kHasPrimitive)]: false,
                      [Symbol(asyncId)]: 47,
                      [Symbol(triggerId)]: 45
                    },
                    [Symbol(kBuffer)]: null,
                    [Symbol(kBufferCb)]: null,
                    [Symbol(kBufferGen)]: null,
                    [Symbol(shapeMode)]: true,
                    [Symbol(kCapture)]: false,
                    [Symbol(kSetNoDelay)]: false,
                    [Symbol(kSetKeepAlive)]: true,
                    [Symbol(kSetKeepAliveInitialDelay)]: 1,
                    [Symbol(kBytesRead)]: 0,
                    [Symbol(kBytesWritten)]: 0,
                    [Symbol(connect-options)]: {
                      rejectUnauthorized: true,
                      ciphers: 'TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384:DHE-RSA-AES256-SHA384:ECDHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA256:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!SRP:!CAMELLIA',
                      checkServerIdentity: <ref *153> [Function: checkServerIdentity] {
                        [length]: 2,
                        [name]: 'checkServerIdentity',
                        [prototype]: { [constructor]: [Circular *153] }
                      },
                      minDHSize: 1024,
                      maxRedirects: 21,
                      maxBodyLength: Infinity,
                      protocol: 'https:',
                      path: null,
                      method: 'POST',
                      headers: [Object: null prototype] {
                        Accept: 'application/json, text/plain, */*',
                        'Content-Type': 'application/json',
                        'User-Agent': 'axios/1.7.7',
                        'Content-Length': '107708',
                        'Accept-Encoding': 'gzip, compress, deflate, br'
                      },
                      agents: { http: undefined, https: undefined },
                      auth: undefined,
                      family: undefined,
                      beforeRedirect: <ref *154> [Function: dispatchBeforeRedirect] {
                        [length]: 2,
                        [name]: 'dispatchBeforeRedirect',
                        [prototype]: { [constructor]: [Circular *154] }
                      },
                      beforeRedirects: {
                        proxy: <ref *155> [Function: beforeRedirect] {
                          [length]: 1,
                          [name]: 'beforeRedirect',
                          [prototype]: { [constructor]: [Circular *155] }
                        }
                      },
                      hostname: 'speech.googleapis.com',
                      port: 443,
                      agent: undefined,
                      nativeProtocols: [Circular *252],
                      pathname: '/v1/speech:recognize',
                      search: '?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
                      _defaultAgent: [Circular *245],
                      host: 'speech.googleapis.com',
                      keepAlive: true,
                      scheduling: 'lifo',
                      timeout: 5000,
                      noDelay: true,
                      servername: 'speech.googleapis.com',
                      _agentKey: 'speech.googleapis.com:443:::::::::::::::::::::',
                      encoding: null,
                      keepAliveInitialDelay: 1000
                    },
                    [_connecting]: [Getter],
                    [pending]: [Getter],
                    [readyState]: [Getter],
                    [bufferSize]: [Getter],
                    bytesRead: [Getter],
                    remoteAddress: [Getter],
                    remoteFamily: [Getter],
                    remotePort: [Getter],
                    localAddress: [Getter],
                    localPort: [Getter],
                    localFamily: [Getter],
                    _bytesDispatched: [Getter],
                    bytesWritten: [Getter],
                    [_handle]: [Getter/Setter],
                    [Symbol(kUpdateTimer)]: [Getter],
                    [writable]: [Getter/Setter],
                    [writableHighWaterMark]: [Getter],
                    [writableObjectMode]: [Getter],
                    [writableBuffer]: [Getter],
                    [writableLength]: [Getter],
                    [writableFinished]: [Getter],
                    [writableCorked]: [Getter],
                    [writableEnded]: [Getter],
                    [writableNeedDrain]: [Getter],
                    [destroyed]: [Getter/Setter]
                  },
                  [length]: 1
                ]
              },
              keepAliveMsecs: 1000,
              keepAlive: true,
              maxSockets: Infinity,
              maxFreeSockets: 256,
              scheduling: 'lifo',
              maxTotalSockets: Infinity,
              totalSocketCount: 1,
              maxCachedSessions: 100,
              _sessionCache: {
                map: {
                  'speech.googleapis.com:443:::::::::::::::::::::': <Buffer 30 82 07 6d 02 01 01 02 02 03 04 04 02 13 02 04 20 00 34 bc d5 e8 57 bd 89 08 26 01 7e 74 6d 1c 77 f1 4f 1b 2c a4 93 43 41 31 8d f8 93 06 7b 52 cd 04 ... 1855 more bytes>
                },
                list: [
                  'speech.googleapis.com:443:::::::::::::::::::::',
                  [length]: 1
                ]
              },
              [Symbol(shapeMode)]: false,
              [Symbol(kCapture)]: false
            },
            Server: <ref *240> [Function: Server] {
              [length]: 2,
              [name]: 'Server',
              [prototype]: Server {
                [constructor]: [Circular *240],
                closeAllConnections: <ref *215> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *215] }
                },
                closeIdleConnections: <ref *216> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *216] }
                },
                setTimeout: <ref *217> [Function: setTimeout] {
                  [length]: 2,
                  [name]: 'setTimeout',
                  [prototype]: { [constructor]: [Circular *217] }
                },
                close: <ref *241> [Function (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [prototype]: { [constructor]: [Circular *241] }
                },
                [Symbol(nodejs.asyncDispose)]: [AsyncFunction (anonymous)] {
                  [length]: 0,
                  [name]: '',
                  [Symbol(Symbol.toStringTag)]: 'AsyncFunction'
                },
                listening: [Getter],
                _events: undefined,
                _eventsCount: 0,
                _maxListeners: undefined,
                [Symbol(kCapture)]: false
              },
              usingDomains: false,
              captureRejectionSymbol: Symbol(nodejs.rejection),
              captureRejections: [Getter/Setter],
              EventEmitterAsyncResource: [Getter],
              errorMonitor: Symbol(events.errorMonitor),
              defaultMaxListeners: [Getter/Setter],
              [kMaxEventTargetListeners]: Symbol(events.maxEventTargetListeners),
              [kMaxEventTargetListenersWarned]: Symbol(events.maxEventTargetListenersWarned)
            },
            createServer: <ref *242> [Function: createServer] {
              [length]: 2,
              [name]: 'createServer',
              [prototype]: { [constructor]: [Circular *242] }
            },
            get: <ref *243> [Function: get] {
              [length]: 3,
              [name]: 'get',
              [prototype]: { [constructor]: [Circular *243] }
            },
            request: <ref *244> [Function: request] {
              [length]: 0,
              [name]: 'request',
              [prototype]: { [constructor]: [Circular *244] }
            }
          }
        },
        pathname: '/v1/speech:recognize',
        search: '?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk'
      },
      _ended: true,
      _ending: true,
      _redirectCount: 0,
      _redirects: [ [length]: 0 ],
      _requestBodyLength: 107708,
      _requestBodyBuffers: [ [length]: 0 ],
      _eventsCount: 3,
      _onNativeResponse: <ref *253> [Function (anonymous)] {
        [length]: 1,
        [name]: '',
        [arguments]: null,
        [caller]: null,
        [prototype]: { [constructor]: [Circular *253] }
      },
      _currentRequest: [Circular *248],
      _currentUrl: 'https://speech.googleapis.com/v1/speech:recognize?key=AIzaSyALOaLEAgdjZ6mi_E4Ckz60SWfBqpVbCuk',
      [Symbol(shapeMode)]: true,
      [Symbol(kCapture)]: false,
      [aborted]: [Getter],
      [connection]: [Getter],
      [socket]: [Getter],
      _writev: null,
      [closed]: [Getter],
      [destroyed]: [Getter/Setter],
      [writable]: [Getter/Setter],
      [writableFinished]: [Getter],
      [writableObjectMode]: [Getter],
      [writableBuffer]: [Getter],
      [writableEnded]: [Getter],
      [writableNeedDrain]: [Getter],
      [writableHighWaterMark]: [Getter],
      [writableCorked]: [Getter],
      [writableLength]: [Getter],
      [errored]: [Getter],
      [writableAborted]: [Getter]
    },
    [Symbol(shapeMode)]: false,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesWritten)]: 0,
    [Symbol(kNeedDrain)]: false,
    [Symbol(corked)]: 0,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [ 'Accept', 'application/json, text/plain, */*', [length]: 2 ],
      'content-type': [ 'Content-Type', 'application/json', [length]: 2 ],
      'user-agent': [ 'User-Agent', 'axios/1.7.7', [length]: 2 ],
      'content-length': [ 'Content-Length', '107708', [length]: 2 ],
      'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br', [length]: 2 ],
      host: [ 'Host', 'speech.googleapis.com', [length]: 2 ]
    },
    [Symbol(errored)]: null,
    [Symbol(kHighWaterMark)]: 16384,
    [Symbol(kRejectNonStandardBodyWrites)]: false,
    [Symbol(kUniqueHeaders)]: null,
    [errored]: [Getter],
    [closed]: [Getter],
    [writableFinished]: [Getter],
    [writableObjectMode]: [Getter],
    [writableLength]: [Getter],
    [writableHighWaterMark]: [Getter],
    [writableCorked]: [Getter],
    [_headers]: [Getter/Setter],
    [connection]: [Getter/Setter],
    [_headerNames]: [Getter/Setter],
    headersSent: [Getter],
    [writableEnded]: [Getter],
    [writableNeedDrain]: [Getter]
  },
  data: {
    totalBilledTime: '1s',
    requestId: '2229819248883201081',
    usingLegacyModels: true
  }
}